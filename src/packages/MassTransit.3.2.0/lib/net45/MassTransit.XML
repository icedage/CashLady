<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MassTransit</name>
    </assembly>
    <members>
        <member name="M:MassTransit.Builders.IConsumePipeBuilder.AddFilter``1(MassTransit.Pipeline.IFilter{MassTransit.ConsumeContext{``0}})">
            <summary>
            Add a filter to the pipe after any existing filters
            </summary>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.Builders.IPublishPipeBuilder.AddFilter``1(MassTransit.Pipeline.IFilter{MassTransit.PublishContext{``0}})">
            <summary>
            Add a filter to the pipe after any existing filters
            </summary>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.Builders.ISendPipeBuilder.AddFilter``1(MassTransit.Pipeline.IFilter{MassTransit.SendContext{``0}})">
            <summary>
            Add a filter to the pipe after any existing filters
            </summary>
            <param name="filter">The filter to add</param>
        </member>
        <member name="P:MassTransit.Builders.IInMemoryBusBuilder.ReceiveTransportProvider">
            <summary>
            The receive transport provider
            </summary>
        </member>
        <member name="M:MassTransit.Builders.IInMemoryBusFactorySpecification.Apply(MassTransit.Builders.IInMemoryBusBuilder)">
            <summary>
            Apply the specification to the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:MassTransit.Builders.IBusBuilder">
            <summary>
            Used to build and configure a service bus instance as it is created
            </summary>
        </member>
        <member name="P:MassTransit.Builders.IBusBuilder.SendTransportProvider">
            <summary>
            The Send Transport Provider
            </summary>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.GetMessageDeserializer(MassTransit.ISendEndpointProvider,MassTransit.IPublishEndpointProvider)">
            <summary>
            The default message deserializer
            </summary>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.CreateSendEndpointProvider(MassTransit.ISendPipeSpecification[])">
            <summary>
            Creates a send endpoint provider using the bus and supplied specifications
            </summary>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.CreatePublishEndpointProvider(MassTransit.IPublishPipeSpecification[])">
            <summary>
            Creates a publish endpoint provider using the bus and supplied specifications
            </summary>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.AddReceiveEndpoint(System.String,MassTransit.IReceiveEndpoint)">
            <summary>
            Adds a receive endpoint to the bus
            </summary>
            <param name="queueName">The name of the queue for the receive endpoint</param>
            <param name="receiveEndpoint"></param>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.SetMessageSerializer(System.Func{MassTransit.IMessageSerializer})">
            <summary>
            Sets the outbound message serializer
            </summary>
            <param name="serializerFactory">The factory to create the message serializer</param>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.AddMessageDeserializer(System.Net.Mime.ContentType,MassTransit.Builders.DeserializerFactory)">
            <summary>
            Adds an inbound message deserializer to the available deserializers
            </summary>
            <param name="contentType">The content type of the deserializer</param>
            <param name="deserializerFactory">The factory to create the deserializer</param>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.CreateConsumePipe(MassTransit.IConsumePipeSpecification[])">
            <summary>
            Create a consume pipe for the endpoint, using the bus builder. The bus builder may add additional filters
            from the bus configuration to the endpoint which can be overridden by the endpoint.
            </summary>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.CreateSendPipe(MassTransit.ISendPipeSpecification[])">
            <summary>
            Create a send pipe for the endpoint, using the bus builder. The bus builder may add additional filters
            from the bus configuration to the endpoint.
            </summary>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Builders.IBusBuilder.ConnectBusObserver(MassTransit.IBusObserver)">
            <summary>
            Connects a bus observer to the bus to observe lifecycle events on the bus
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BusConfigurators.IPublishPipeFactory.CreatePublishPipe(MassTransit.IPublishPipeSpecification[])">
            <summary>
            Creates a send pipe using the specifications and any additional specifications specified
            </summary>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BusConfigurators.ISendPipeFactory.CreateSendPipe(MassTransit.ISendPipeSpecification[])">
            <summary>
            Creates a send pipe using the specifications and any additional specifications specified
            </summary>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BusObserverExtensions.BusObserver(MassTransit.IBusFactoryConfigurator,MassTransit.IBusObserver)">
            <summary>
            Connect an observer to the bus, to observe creation, start, stop, fault events.
            </summary>
            <param name="configurator"></param>
            <param name="observer"></param>
        </member>
        <member name="M:MassTransit.BusObserverExtensions.BusObserver``1(MassTransit.IBusFactoryConfigurator,System.Func{``0})">
            <summary>
            Connect an observer to the bus, to observe creation, start, stop, fault events.
            </summary>
            <param name="configurator"></param>
            <param name="observerFactory">Factory to create the bus observer</param>
        </member>
        <member name="M:MassTransit.CircuitBreakerExtensions.UseCircuitBreaker``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.ICircuitBreakerConfigurator{``0}})">
            <summary>
            Puts a circuit breaker in the pipe, which can automatically prevent the flow of messages to the consumer
            when the circuit breaker is opened.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IObserverConfigurator`1">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.HandlerConfigurator`1">
            <summary>
            Connects a handler to the inbound pipe of the receive endpoint
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IHandlerConfigurator`1">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IConsumeConfigurator">
            <summary>
            The base configuration interface for a consumer, handler, or instance that 
            can consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerConfigurator`1.ConfigureMessage``1(System.Action{MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator{``0}})">
            <summary>
            Configure a message type for the consumer, such as adding middleware to the pipeline for
            the message type.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.ConsumerConventionCache.GetConventions``1">
            <summary>
            Returns the conventions registered for identifying message consumer types
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.ConsumerInterfaceType">
            <summary>
            A standard asynchronous consumer message type, defined by IConsumer
            </summary>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.AsyncConsumerMessageConvention`1">
            <summary>
            A default convention that looks for IConsumerOfT message types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.LegacyConsumerMessageConvention`1">
            <summary>
            A default convention that looks legacy message interface types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.MessageObserverConnector`1">
            <summary>
            Connects a message handler to a pipe
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.IObserverConnector`1">
            <summary>
            Connects a message handler to the ConsumePipe
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IObserverConnector`1.ConnectObserver(MassTransit.Pipeline.IConsumePipeConnector,System.IObserver{MassTransit.ConsumeContext{`0}},MassTransit.Pipeline.IFilter{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for all messages of type T 
            </summary>
            <param name="consumePipe"></param>
            <param name="observer"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IObserverConnector`1.ConnectRequestObserver(MassTransit.Pipeline.IRequestPipeConnector,System.Guid,System.IObserver{MassTransit.ConsumeContext{`0}},MassTransit.Pipeline.IFilter{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for messages with the specified RequestId
            </summary>
            <param name="consumePipe"></param>
            <param name="requestId"></param>
            <param name="observer"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.IHandlerConnector`1">
            <summary>
            Connects a message handler to the ConsumePipe
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IHandlerConnector`1.ConnectHandler(MassTransit.Pipeline.IConsumePipeConnector,MassTransit.MessageHandler{`0},MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for all messages of type T 
            </summary>
            <param name="consumePipe"></param>
            <param name="handler"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IHandlerConnector`1.ConnectRequestHandler(MassTransit.Pipeline.IRequestPipeConnector,System.Guid,MassTransit.MessageHandler{`0},MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for messages with the specified RequestId
            </summary>
            <param name="consumePipe"></param>
            <param name="requestId"></param>
            <param name="handler"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.HandlerConnector`1">
            <summary>
            Connects a message handler to a pipe
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.InstanceMessageConnector`2">
            <summary>
            Connects a consumer instance to the inbound pipeline for the specified message type. The actual
            filter that invokes the consume method is passed to allow different types of message bindings,
            including the legacy bindings from v2.x
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.InstanceMessageConnector`2.#ctor(MassTransit.Pipeline.IFilter{MassTransit.ConsumerConsumeContext{`0,`1}})">
            <summary>
            Constructs the instance connector
            </summary>
            <param name="consumeFilter">The consume method invocation filter</param>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.LegacyConsumerInterfaceType">
            <summary>
            A legacy message-only consumer
            </summary>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.IConsumerConnector">
            <summary>
                Interface implemented by objects that tie an inbound pipeline together with
                consumers (by means of calling a consumer factory).
            </summary>
        </member>
        <member name="T:MassTransit.ConsumerConvention">
            <summary>
            Used to register conventions for consumer message types
            </summary>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Register``1">
            <summary>
            Register a consumer convention to be used for finding message types
            </summary>
            <typeparam name="T">The convention type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Register``1(``0)">
            <summary>
            Register a consumer convention to be used for finding message types
            </summary>
            <typeparam name="T">The convention type</typeparam>
        </member>
        <member name="M:MassTransit.DeadLetterExtensions.UseDeadLetterQueue(MassTransit.IPipeConfigurator{MassTransit.ReceiveContext},MassTransit.Pipeline.IPipe{MassTransit.ReceiveContext})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
        </member>
        <member name="T:MassTransit.ICircuitBreakerConfigurator`1">
            <summary>
            Configure the settings on the circuit breaker
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.TrackingPeriod">
            <summary>
            The period after which the attempt/failure counts are reset.
            </summary>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.TripThreshold">
            <summary>
            The percentage of attempts that must fail before the circuit breaker trips into
            an open state.
            </summary>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.ActiveThreshold">
            <summary>
            The number of attempts that must occur before the circuit breaker becomes active. Until the
            breaker activates, it will not open on failure
            </summary>
        </member>
        <member name="M:MassTransit.ICircuitBreakerConfigurator`1.ResetInterval(System.TimeSpan)">
            <summary>
            Sets a specific reset interval for the circuit to attempt to close after being tripped.
            By default, this is an incrementing scale up to one minute.
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:MassTransit.IConsumePipeConfigurator.AddPipeSpecification``1(MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="T:MassTransit.IConsumerConvention">
            <summary>
            A consumer convention is used to find message types inside a consumer class.
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerConvention.GetConsumerMessageConvention``1">
            <summary>
            Returns the message convention for the type of T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumerMessageConvention">
            <summary>
            A convention that returns connectors for message types that are defined in the consumer
            type.
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerMessageConvention.GetMessageTypes">
            <summary>
            Returns the message types handled by the consumer class
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IManagementEndpointConfigurator">
            <summary>
            Used to configure the management endpoint, and to denote the configurator as for that 
            purpose to be usable by middleware components wanting to connect to it.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification``1(MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.PublishContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipelineConfigurator.ConfigurePublish(System.Action{MassTransit.IPublishPipeConfigurator})">
            <summary>
            Configure the Send pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.ISendPipelineConfigurator.ConfigureSend(System.Action{MassTransit.ISendPipeConfigurator})">
            <summary>
            Configure the Send pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.ISendPipeConfigurator.AddPipeSpecification``1(MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.SendContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy the specified message property from the input to the result (all properties are copied by default).
            Only use this to copy specific properties, ignoring others. This is really just for completeness, it's
            not necessary to use it.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Default``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified message property to the default value (ignoring the input value)
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.Transformation.SourceContext{``0,`0},``0})">
            <summary>
            Replace the value on the input with the specified value
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
            <param name="valueProvider">The method to return the property</param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Replace``1(System.Reflection.PropertyInfo,MassTransit.Transformation.IPropertyProvider{``0,`0})">
            <summary>
            Replace the value on the input with the specified value
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <param name="propertyProvider"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.Transformation.SourceContext{``0,`0},``0})">
            <summary>
            Set the property to the value, using the source context to create/select the value
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">The property select expression</param>
            <param name="valueProvider">The method to return the property</param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Reflection.PropertyInfo,MassTransit.Transformation.IPropertyProvider{``0,`0})">
            <summary>
            Set the property to the value, using the source context to create/select the value
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="property"></param>
            <param name="propertyProvider"></param>
        </member>
        <member name="M:MassTransit.LatestExtensions.UseLatest``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.ILatestConfigurator{``0}})">
            <summary>
            Adds a latest value filter to the pipe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.ManagementEndpointConfigurator">
            <summary>
            This is simply a delegate to the endpoint configurator for a management endpoint.
            A management endpoint is just a type of recieve endpoint that can be used to communicate
            with middleware, etc.
            </summary>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(MassTransit.IConsumePipeConfigurator,MassTransit.MessageData.IMessageDataRepository)">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="repository">The message data repository</param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(MassTransit.IConsumePipeConfigurator,MassTransit.MessageData.IMessageDataRepository,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="repository"></param>
            <param name="configureCallback"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.MessageData.IMessageDataRepository)">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="repository"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.MessageData.IMessageDataRepository,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="repository"></param>
            <param name="configureCallback"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.LoadMessageData``2(MassTransit.ITransformConfigurator{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},MassTransit.MessageData.IMessageDataRepository)">
            <summary>
            Load the message data as part of the transform (replaces the property on the original message, to avoid multiple
            loads of the same data).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="configurator"></param>
            <param name="propertyExpression"></param>
            <param name="repository"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerExtensions.UseMessageScheduler(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext},System.Uri)">
            <summary>
            Specify an endpoint to use for message scheduling
            </summary>
            <param name="configurator"></param>
            <param name="schedulerAddress"></param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfiguratorExtensions.UseInMemoryOutbox(MassTransit.IConsumePipeConfigurator)">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator">The pipe configurator</param>
        </member>
        <member name="M:MassTransit.PartitionerExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32,System.Func{MassTransit.ConsumeContext{``0},System.Guid})">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32,System.Func{MassTransit.ConsumeContext{``0},System.String},System.Text.Encoding)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConcurrencyLimitPipeSpecification`1">
            <summary>
            Configures a concurrency limit on the pipe. If the management endpoint is specified,
            the consumer and appropriate mediator is created to handle the adjustment of the limit.
            </summary>
            <typeparam name="T">The message type being limited</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.HandlerPipeSpecification`1">
            <summary>
            Adds a message handler to the consuming pipe builder
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.PipeConfigurators.IBuildPipeConfigurator`1.Build">
            <summary>
            Builds the pipe, applying any initial specifications to the front of the pipe
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.PipeConfigurators.IPipeSpecification`1">
            <summary>
            Configures a pipe builder (typically by adding filters), but allows late binding to the
            pipe builder with pre-validation that the operations will succeed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.PipeConfigurators.IPipeSpecification`1.Apply(MassTransit.PipeBuilders.IPipeBuilder{`0})">
            <summary>
            Apply the specification to the builder
            </summary>
            <param name="builder">The pipe builder</param>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ObserverPipeSpecification`1">
            <summary>
            Adds a message handler to the consuming pipe builder
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ScheduledRetryExtensions.UseScheduledRedelivery``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.IRetryPolicy)">
            <summary>
            Use the message scheduler to schedule redelivery of messages based on the retry policy.
            </summary>
            <param name="configurator"></param>
            <param name="retryPolicy"></param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a message transform, the behavior of which is defined inline using the configurator
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IConsumePipeConfigurator,System.Func{MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator{``0},MassTransit.IConsumeTransformSpecification{``0}})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="getSpecification"></param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a message transform, the behavior of which is defined inline using the configurator
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Func{MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator{``0},MassTransit.IConsumeTransformSpecification{``0}})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="getSpecification"></param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a transform on send to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="T:MassTransit.Context.CorrelationIdConsumeContextProxy`1">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.MessageCorrelationCache`1">
            <summary>
            A cache of convention-based CorrelationId mappers, used unless overridden by some mystical force
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.OutboxContext">
            <summary>
            The context for an outbox instance as part of consume context. Used to signal the completion of
            the consume, and store any Task factories that should be created.
            </summary>
        </member>
        <member name="P:MassTransit.Context.OutboxContext.ClearToSend">
            <summary>
            Returns an awaitable task that is completed when it is clear to send messages
            </summary>
        </member>
        <member name="M:MassTransit.Context.OutboxContext.Add(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a method to be invoked once the outbox is ready to be sent
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:MassTransit.Context.ConsumeContextProxy">
            <summary>
            A consume context proxy creates a payload scope, such that anything added to the payload
            of the context is only added at the scope level and below.
            </summary>
        </member>
        <member name="T:MassTransit.Context.ConsumeContextProxy`1">
            <summary>
            A consume context proxy creates a payload scope, such that anything added to the payload
            of the context is only added at the scope level and below.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ScheduleMessageRedeliveryContext`1">
            <summary>
            Used to schedule message redelivery using the message scheduler
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Context.ConsumerConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.IHeaderProvider">
            <summary>
            Used to read a header from a transport message
            </summary>
        </member>
        <member name="T:MassTransit.Context.IPublishEndpointConverter">
            <summary>
            Calls the generic version of the IPublishEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.JsonHeaders">
            <summary>
            The context headers are sourced from the IContextHeaderProvider, with the use of a Json deserializer
            to convert data types to objects as required. If the original headers are Json objects, those headers
            are deserialized as well
            </summary>
        </member>
        <member name="T:MassTransit.Context.PublishEndpointConverter`1">
            <summary>
            Converts the object message type to the generic type T and publishes it on the endpoint specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.PublishEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.NewSagaConsumeContext`2">
            <summary>
            A new saga that was created
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.SendRequest`1">
            <summary>
            Handles the sending of a request to the endpoint specified
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="T:MassTransit.Context.ISendEndpointConverter">
            <summary>
            Calls the generic version of the ISendEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.SendEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.SendEndpointConverter`1">
            <summary>
            Converts the object type message to the appropriate generic type and invokes the send method with that
            generic overload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Contracts.ConcurrencyLimitUpdated">
            <summary>
            Published when the concurrency limit of a filter is updated.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.Timestamp">
            <summary>
            The actual time at which the adjustment was applied
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.Id">
            <summary>
            The identifier that was adjusted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.ConcurrencyLimit">
            <summary>
            The current concurrency limit value
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.SetConcurrencyLimit">
            <summary>
            Sets the concurrency limit of a concurrency limit filter
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.Timestamp">
            <summary>
            The timestamp at which the adjustment command was sent
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.Id">
            <summary>
            The identifier of the concurrency limit to set (optional)
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.ConcurrencyLimit">
            <summary>
            The new concurrency limit for the filter
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Activity`2">
            <summary>
            An Activity implements the execute and compensate methods for an activity
            </summary>
            <typeparam name="TArguments">The activity argument type</typeparam>
            <typeparam name="TLog">The activity log argument type</typeparam>
        </member>
        <member name="T:MassTransit.Courier.ActivityFactory">
            <summary>
            Should be implemented by containers that support generic object resolution in order to 
            provide a common lifetime management policy for all activities
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ActivityFactory.Execute``2(MassTransit.Courier.ExecuteContext{``1},MassTransit.Pipeline.IPipe{MassTransit.Courier.ExecuteActivityContext{``1}})">
            <summary>
            Create and execute the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ActivityFactory.Compensate``2(MassTransit.Courier.CompensateContext{``1},MassTransit.Pipeline.IPipe{MassTransit.Courier.CompensateActivityContext{``1}})">
            <summary>
            Create and compensate the activity
            </summary>
            <param name="compensateContext"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ActivityFactoryExtensions.CreateActivityFactory``3(MassTransit.Courier.ActivityFactory)">
            <summary>
            Created an activity factory for the specified activity type
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="activityFactory"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.Argument.HasValue">
            <summary>
            True if the argument has a value, false if the value is null in the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Argument.IsPresent">
            <summary>
            True if the argument was present in the intinerary
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Argument`1">
            <summary>
            An argument that may have a domain-specific implementation that goes beyond simple
            type usage. For instance, encrypted values maybe mapped
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Courier.Argument`1.Value">
            <summary>
            The argument value
            </summary>
        </member>
        <member name="M:MassTransit.Courier.CompensateActivity`1.Compensate(MassTransit.Courier.CompensateContext{`0})">
            <summary>
            Compensate the activity and return the remaining compensation items
            </summary>
            <param name="context">The compensation information for the activity</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.CompensateActivityContext`2.Activity">
            <summary>
            The activity that was created/used for this compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.TrackingNumber">
            <summary>
            The tracking number for this routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.Host">
            <summary>
            The host performing the compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.StartTimestamp">
            <summary>
            The start time for the activity compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ElapsedTime">
            <summary>
            The time elapsed for the compensation operation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ConsumeContext">
            <summary>
            The consume context of the compensation routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ActivityName">
            <summary>
            The name of the activity being compensated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ExecutionId">
            <summary>
            The tracking number for this activity within the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Compensated">
            <summary>
            The compensation was successful
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Compensated(System.Object)">
            <summary>
            The compenstation was successful
            </summary>
            <param name="values">The variables to be updated on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Compensated(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The compensation was successful
            </summary>
            <param name="variables">The variables to be updated on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Failed">
            <summary>
            The compensation failed
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Failed(System.Exception)">
            <summary>
            The compensation failed with the specified exception
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Courier.Contracts.ActivityException">
            <summary>
            Capture the exception information thrown by an activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.ExecutionId">
            <summary>
            The tracking number of the activity that threw the exception
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Timestamp">
            <summary>
            The point in time when the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Elapsed">
            <summary>
            The time from when the routing slip was created until the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Name">
            <summary>
            The name of the activity that caused the exception
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Host">
            <summary>
            The host where the exception was thrown
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.ExceptionInfo">
            <summary>
            The exception details
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.ActivityLog">
            <summary>
            Message contract for storing activity log data
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Name">
            <summary>
            The name of the activity that was completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Timestamp">
            <summary>
            The timestamp when the activity started
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.Address">
            <summary>
            The compensation address where the routing slip should be sent for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlip">
            <summary>
            A RoutingSlip is the transport-level interface that is used to carry the details
            of a message routing slip over the network.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.TrackingNumber">
            <summary>
            The unique tracking number for this routing slip, used to correlate events
            and activities
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.CreateTimestamp">
            <summary>
            The time when the routing slip was created
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Itinerary">
            <summary>
            The list of activities that are remaining
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.ActivityLogs">
            <summary>
            The logs of activities that have already been executed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.CompensateLogs">
            <summary>
            The logs of activities that can be compensated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Variables">
            <summary>
            Variables that are carried with the routing slip for use by any activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.ActivityExceptions">
            <summary>
            A list of exceptions that have occurred during routing slip execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Subscriptions">
            <summary>
            Subscriptions to routing slip events
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ActivityName">
            <summary>
            The name of the activity that failed to compensate
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ExceptionInfo">
            <summary>
            The exception information from the faulting compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Arguments">
            <summary>
            The arguments that were specified for the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Data">
            <summary>
            The results saved as the CompensateLog by the Activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ExecutionId">
            <summary>
            The tracking number of this activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ExceptionInfo">
            <summary>
            The exception information from the faulting activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Arguments">
            <summary>
            The arguments that were specified for the activity at execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.ExceptionInfo">
            <summary>
            The exception information from the faulting activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipCompleted">
            <summary>
            Published when a routing slip completes
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipEventContents">
            <summary>
            Specifies the specific contents of routing slip events to be included for a subscription
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.All">
            <summary>
            Include all event contents
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.None">
            <summary>
            Do not include any contents with the routing slip events
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Variables">
            <summary>
            The routing slip variables after the activity was executed or compensated
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Arguments">
            <summary>
            The arguments provided to the activity
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Data">
            <summary>
            The data logged by an activity when completed or compensated
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Itinerary">
            <summary>
            The itinerary that was added/removed from the routing slip when revised
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.SkipEncrypted">
            <summary>
            If specified, encrypted content is excluded from the event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.All">
            <summary>
            By default, all routing slip events are included for a subscription
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Completed">
            <summary>
            Send the RoutingSlipCompleted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Faulted">
            <summary>
            Send the RoutingSlipFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.CompensationFailed">
            <summary>
            Send the RoutingSlipCompensationFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Terminated">
            <summary>
            Send the routing slip terminated event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Revised">
            <summary>
            Send the routing slip revised event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompleted">
            <summary>
            Send the RoutingSlipActivityCompleted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityFaulted">
            <summary>
            Send the RoutingSlipActivityFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompensated">
            <summary>
            Send the RoutingSlipActivityCompensated event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompensationFailed">
            <summary>
            Send the RoutingSlipCompensationFailed event
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipFaulted">
            <summary>
            Published when a routing slip faults (after compensation)
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Timestamp">
            <summary>
            The date/time when the routing slip faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Duration">
            <summary>
            The time from when the routing slip was created until the fault occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.ActivityExceptions">
            <summary>
            The exception information from the faulting activities
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipRevised">
            <summary>
            Published when a routing slip is revised during execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.ExecutionId">
            <summary>
            The execution that modified the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Itinerary">
            <summary>
            The new itinerary for the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.DiscardedItinerary">
            <summary>
            The previous itinerary of the routing slip that is no longer included
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipTerminated">
            <summary>
            Published when a routing slip is terminated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.ExecutionId">
            <summary>
            The execution that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.DiscardedItinerary">
            <summary>
            The remainder of the itinerary that will not be executed by the routing slip engine.
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.Subscription">
            <summary>
            A routing slip subscription defines a specific endpoint where routing
            slip events should be sent (not published). If specified, events are not published.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Address">
            <summary>
            The address where events should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Events">
            <summary>
            The events that are subscribed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Include">
            <summary>
            The event contents to include when published
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteActivity`1.Execute(MassTransit.Courier.ExecuteContext{`0})">
            <summary>
            Execute the activity
            </summary>
            <param name="context">The execution context</param>
            <returns>An execution result, created from the execution passed to the activity</returns>
        </member>
        <member name="T:MassTransit.Courier.ExecuteActivityContext`2">
            <summary>
            An activity and execution context combined into a single container from the factory
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="P:MassTransit.Courier.ExecuteActivityContext`2.Activity">
            <summary>
            The activity that was created/used for this execution
            </summary>
        </member>
        <member name="T:MassTransit.Courier.ExecuteActivityFactory`1">
            <summary>
            A factory that creates an execute activity and thenn invokes the pipe for the activity context
            </summary>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:MassTransit.Courier.ExecuteActivityFactory`1.Execute(MassTransit.Courier.ExecuteContext{`0},MassTransit.Pipeline.IPipe{MassTransit.Courier.ExecuteActivityContext{`0}})">
            <summary>
            Executes the activity context by passing it to the activity factory, which creates the activity
            and then invokes the next pipe with the combined activity context
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.TrackingNumber">
            <summary>
            The tracking number for this routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.ExecutionId">
            <summary>
            The tracking number for this activity within the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Completed">
            <summary>
            Completes the execution, without passing a compensating log entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Completes the execution, passing updated variables to the routing slip
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables(System.Object)">
            <summary>
            Completes the execution, passing updated variables to the routing slip
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Completed``1(``0)">
            <summary>
            Completes the activity, passing a compensation log entry
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables``1(``0,System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on 
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <param name="variables">An anonymous object of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on 
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Terminate">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Terminate(System.Object)">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Terminate(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Faulted">
            <summary>
            The activity Faulted for an unknown reason, but compensation should be triggered
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Faulted(System.Exception)">
            <summary>
            The activity Faulted, and compensation should be triggered
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext`1.Arguments">
            <summary>
            The arguments from the routing slip for this activity
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Hosts.SanitizedRoutingSlip">
            <summary>
            A sanitized routing slip is one that has been read from and ensured to be safe for use, cleaning up any
            missing or null properties, as well as making it safe to avoid excessive validity checks across the solution
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.CompensateActivityFilter`1">
            <summary>
            Compensates an activity as part of an activity execute host pipe
            </summary>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.ExecuteActivityFilter`1">
            <summary>
            Executes an activity as part of an activity execute host pipe
            </summary>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="P:MassTransit.Courier.ItineraryBuilder.TrackingNumber">
            <summary>
            The tracking number of the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivity(System.String,System.Uri)">
            <summary>
            Adds an activity to the routing slip without specifying any arguments
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivity(System.String,System.Uri,System.Object)">
            <summary>
            Adds an activity to the routing slip specifying activity arguments as an anonymous object
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">An anonymous object of properties matching the argument names of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivity(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an activity to the routing slip specifying activity arguments a dictionary
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">A dictionary of name/values matching the activity argument properties</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddVariable(System.String,System.String)">
            <summary>
            Add a variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Add a variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.SetVariables(System.Object)">
            <summary>
            Sets the value of any existing variables to the value in the anonymous object,
            as well as adding any additional variables that did not exist previously.
            
            For example, SetVariables(new { IntValue = 27, StringValue = "Hello, World." });
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.SetVariables(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Set multiple variables (from a dictionary, for example) on the routing slip
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivitiesFromSourceItinerary">
            <summary>
            Add the original itinerary to the routing slip (if present)
            </summary>
            <returns>The number of activities added to the itinerary</returns>
        </member>
        <member name="T:MassTransit.Courier.RoutingSlipBuilder">
            <summary>
            A RoutingSlipBuilder is used to create a routing slip with proper validation that the resulting RoutingSlip
            is valid.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.RoutingSlipBuilder.TrackingNumber">
            <summary>
            The tracking number of the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivity(System.String,System.Uri)">
            <summary>
            Adds an activity to the routing slip without specifying any arguments
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivity(System.String,System.Uri,System.Object)">
            <summary>
            Adds an activity to the routing slip specifying activity arguments as an anonymous object
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">An anonymous object of properties matching the argument names of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivity(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an activity to the routing slip specifying activity arguments a dictionary
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">A dictionary of name/values matching the activity argument properties</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddVariable(System.String,System.String)">
            <summary>
            Add a string value to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Add an object variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.SetVariables(System.Object)">
            <summary>
            Sets the value of any existing variables to the value in the anonymous object,
            as well as adding any additional variables that did not exist previously.
            
            For example, SetVariables(new { IntValue = 27, StringValue = "Hello, World." });
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivitiesFromSourceItinerary">
            <summary>
            Adds the activities from the source itinerary to the new routing slip and removes them from the
            source itinerary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.Build">
            <summary>
            Builds the routing slip using the current state of the builder
            </summary>
            <returns>The RoutingSlip</returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivityException(MassTransit.HostInfo,System.String,System.Guid,System.DateTime,System.TimeSpan,System.Exception)">
            <summary>
            Adds an activity exception to the routing slip
            </summary>
            <param name="host"></param>
            <param name="name">The name of the faulted activity</param>
            <param name="activityTrackingNumber">The activity tracking number</param>
            <param name="timestamp">The timestamp of the exception</param>
            <param name="elapsed">The time elapsed from the start of the activity to the exception</param>
            <param name="exception">The exception thrown by the activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivityException(MassTransit.HostInfo,System.String,System.Guid,System.DateTime,System.TimeSpan,MassTransit.ExceptionInfo)">
            <summary>
            Adds an activity exception to the routing slip
            </summary>
            <param name="host"></param>
            <param name="name">The name of the faulted activity</param>
            <param name="activityTrackingNumber">The activity tracking number</param>
            <param name="timestamp">The timestamp of the exception</param>
            <param name="elapsed">The time elapsed from the start of the activity to the exception</param>
            <param name="exceptionInfo"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipExtensions.RanToCompletion(MassTransit.Courier.Contracts.RoutingSlip)">
            <summary>
            Returns true if there are no remaining activities to be executed
            </summary>
            <param name="routingSlip"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Courier.Serialization.DefaultJsonTypeConverter`1">
            <summary>
            Default conversion of properties using standard serialization approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Serialization.JsonTypeConverter`1">
            <summary>
            Converts from a JToken to the requested type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetEncryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.SendContext)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetEncryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.Transformation.TransformContext)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetDecryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.ReceiveContext)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetDecryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.Transformation.TransformContext)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="P:MassTransit.ExceptionConsumeContext.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumeContext.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.ExceptionTimestamp">
            <summary>
            The time at which the exception was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.EndpointSettings">
            <summary>
            These endpoint settings are loaded from the app.config of the assembly to override
            the default values. By default, the queue name is derived from the endpoint specification
            class name.
            </summary>
        </member>
        <member name="P:MassTransit.Hosting.EndpointSettings.QueueName">
            <summary>
            The queue name for the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Hosting.EndpointSettings.ConsumerLimit">
            <summary>
            The consumer limit for the endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.IActivityQueueNameProvider">
            <summary>
            A queue name provider for Courier activities, built based on the activity name
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.IActivityQueueNameProvider.GetExecuteActivityQueueName(System.String)">
            <summary>
            Returns the queue name for execution 
            </summary>
            <param name="activityName">The activity name</param>
            <returns>The name of the queue</returns>
        </member>
        <member name="M:MassTransit.Hosting.IActivityQueueNameProvider.GetCompensateActivityQueueName(System.String)">
            <summary>
            Returns the queue name for compensation
            </summary>
            <param name="activityName"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Hosting.IConnectionStringProvider">
            <summary>
            A connection string source used to build out connection strings
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.IConnectionStringProvider.TryGetConnectionString(System.String,System.String@,System.String@,System.String,System.String)">
            <summary>
            Returns the requested connection string, optionally replacing the server or catalog
            </summary>
            <param name="connectionName">The name of the connection string</param>
            <param name="connectionString"></param>
            <param name="providerName"></param>
            <param name="serverName">Optional, the server name to use instead of the name in the setting source</param>
            <param name="databaseName">Optional, the catalog name to use instead of the name in the setting source</param>
            <returns>A properly formatted connection string</returns>
        </member>
        <member name="P:MassTransit.Hosting.IEndpointSpecification.QueueName">
            <summary>
            The queue name to which the consumer should be connected
            </summary>
        </member>
        <member name="P:MassTransit.Hosting.IEndpointSpecification.ConsumerLimit">
            <summary>
            Limits the number of concurrent consumers
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.IEndpointSpecification.Configure(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configures the receive endpoint
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.Hosting.IServiceConfigurator">
            <summary>
            Passed to a service bootstrapper to allow configuration of receive endpoints
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.IServiceSpecification">
            <summary>
            Used to configure the service that is hosting the endpoints
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.ISettings">
            <summary>
            Settings are a collection of configuration values that are explictly declared
            so that they can be provided to a class at runtime from any source
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.ISettingsProvider.TryGetSettings``1(System.String,``0@)">
            <summary>
            Try to get the settings of the specified type, using the specified prefix
            </summary>
            <typeparam name="T">The settings type to return</typeparam>
            <param name="prefix">The prefix to use when resolving configuration values from the property names</param>
            <param name="settings">The output settings value</param>
            <returns>True if the settings could be resolved</returns>
        </member>
        <member name="M:MassTransit.Hosting.ISettingsProvider.TryGetSettings``1(``0@)">
            <summary>
            Try to get the settings of the specified type, using the specified prefix
            </summary>
            <typeparam name="T">The settings type to return</typeparam>
            <param name="settings">The output settings value</param>
            <returns>True if the settings could be resolved</returns>
        </member>
        <member name="T:MassTransit.IBusFactorySelector">
            <summary>
            Use one of the selector extension methods to create a bus instance for the
            selected transport.
            </summary>
        </member>
        <member name="T:MassTransit.IBusObserver">
            <summary>
            Used to observe events produced by the bus
            </summary>
        </member>
        <member name="M:MassTransit.IBusObserver.PostCreate(MassTransit.IBus)">
            <summary>
            Called after the bus has been created.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.CreateFaulted(System.Exception)">
            <summary>
            Called when the bus fails to be created
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PreStart(MassTransit.IBus)">
            <summary>
            Called when the bus is being started, before the actual Start commences.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PostStart(MassTransit.IBus,System.Threading.Tasks.Task)">
            <summary>
            Called once the bus has started and is running
            </summary>
            <param name="bus"></param>
            <param name="busReady">A task which is completed once the bus is ready and all receive endpoints are ready.</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.StartFaulted(MassTransit.IBus,System.Exception)">
            <summary>
            Called when the bus fails to start
            </summary>
            <param name="bus"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PreStop(MassTransit.IBus)">
            <summary>
            Called when the bus is being stopped, before the actual Stop commences.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PostStop(MassTransit.IBus)">
            <summary>
            Called when the bus has been stopped.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.StopFaulted(MassTransit.IBus,System.Exception)">
            <summary>
            Called when the bus failed to Stop.
            </summary>
            <param name="bus"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IMessageData.Address">
            <summary>
            Returns the address of the message data
            </summary>
        </member>
        <member name="P:MassTransit.IMessageData.HasValue">
            <summary>
            True if the value is present in the message, and not null
            </summary>
        </member>
        <member name="T:MassTransit.IProbeSite">
            <summary>
            To support the introspection of code, this interface is used to gain
            information about the bus.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishEndpointProvider.GetPublishSendEndpoint(System.Type)">
            <summary>
            Returns the ISendEndpoint for the specified message type.
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveEndpointObserver">
            <summary>
            Used to observe the events signaled by a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Ready(MassTransit.ReceiveEndpointReady)">
            <summary>
            Called when the receive endpoint is ready to receive messages
            </summary>
            <param name="ready"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Completed(MassTransit.ReceiveEndpointCompleted)">
            <summary>
            Called when the receive endpoint has completed
            </summary>
            <param name="completed"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Faulted(MassTransit.ReceiveEndpointFaulted)">
            <summary>
            Called when the receive endpoint faults
            </summary>
            <param name="faulted"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryPolicy.GetRetryContext">
            <summary>
            Returns a context that can be used to go through the retries
            </summary>
            <returns>A RetryInterval enumerator</returns>
        </member>
        <member name="M:MassTransit.IRetryPolicy.CanRetry(System.Exception)">
            <summary>
            Determines if the exception can be retried
            </summary>
            <param name="exception">The exception that occurred</param>
            <returns>True if the task should be retried</returns>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Debug(System.Object)">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Info(System.Object)">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Info(System.Object,System.Exception)">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Warn(System.Object)">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Error(System.Object)">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Error(System.Object,System.Exception)">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Fatal(System.Object)">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="T:MassTransit.Logging.ILog">
            <summary>
            Implementers handle logging and filtering based on logging levels.
            </summary>
        </member>
        <member name="T:MassTransit.Logging.LogOutputProvider">
            <summary>
            Delegate to provide the log output if the log level is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageData.EncryptedMessageDataRepository.#ctor(MassTransit.MessageData.IMessageDataRepository,MassTransit.Serialization.ICryptoStreamProvider)">
            <summary>
            Provides encrypted stream support to ensure that message data is encrypted at rest.
            </summary>
            <param name="repository">The original message data repository where message data is stored.</param>
            <param name="streamProvider">The encrypted stream provider</param>
        </member>
        <member name="T:MassTransit.MessageData.IMessageDataRepository">
            <summary>
            Storage of large message data that can be stored and retrieved separate of the message body. 
            Implemented as a claim-check pattern when an identifier is stored in the message body which
            is used to retrieve the message data separately.
            </summary>
        </member>
        <member name="M:MassTransit.MessageData.IMessageDataRepository.Get(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Returns a stream to read the message data for the specified address.
            </summary>
            <param name="address">The data address</param>
            <param name="cancellationToken">A cancellation token for the request</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageData.IMessageDataRepository.Put(System.IO.Stream,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Puts message data into the repository
            </summary>
            <param name="stream">The stream of data for the message</param>
            <param name="timeToLive"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageData.LoadMessageData`1">
            <summary>
            Loads the message data when accessed via Value, using the specified repository and converter.
            </summary>
            <typeparam name="T">The message data property type</typeparam>
        </member>
        <member name="T:MassTransit.Bus">
            <summary>
            used to get access to the bus factories
            </summary>
        </member>
        <member name="P:MassTransit.Bus.Factory">
            <summary>
            Access a bus factory from this main factory interface (easy extension method support)
            </summary>
        </member>
        <member name="T:MassTransit.BusHandle">
            <summary>
            Returned once a bus has been started. Should call Stop or Dispose before the process
            can exit.
            </summary>
        </member>
        <member name="P:MassTransit.BusHandle.Ready">
            <summary>
            A task which can be awaited to know when the bus is ready and all of the receive endpoints have reported ready.
            </summary>
        </member>
        <member name="M:MassTransit.BusHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the bus and all receiving endpoints on the bus. Note that cancelling the Stop
            operation may leave the bus and/or one or more receive endpoints in an indeterminate
            state.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>An awaitable task that is completed once everything is stopped</returns>
        </member>
        <member name="M:MassTransit.BusHandle.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the bus and all receiving endpoints on the bus. Note that cancelling the Stop
            operation may leave the bus and/or one or more receive endpoints in an indeterminate
            state.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>An awaitable task that is completed once everything is stopped</returns>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.Stop(MassTransit.BusHandle,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="handle">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.ConcurrencyLimitExtensions.UseConcurrencyLimit``1(MassTransit.IPipeConfigurator{``0},System.Int32,MassTransit.IManagementEndpointConfigurator,System.String)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="concurrencyLimit">The concurrency limit for the subsequent filters in the pipeline</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="T:MassTransit.Configurators.ValidationResult">
            <summary>
            Reports information about the configuration before configuring
            so that corrections can be made without allocating resources, etc.
            </summary>
        </member>
        <member name="P:MassTransit.Configurators.ValidationResult.Disposition">
            <summary>
            The disposition of the result, any Failure items will prevent
            the configuration from completing.
            </summary>
        </member>
        <member name="P:MassTransit.Configurators.ValidationResult.Message">
            <summary>
            The message associated with the result
            </summary>
        </member>
        <member name="P:MassTransit.Configurators.ValidationResult.Key">
            <summary>
            The key associated with the result (chained if configurators are nested)
            </summary>
        </member>
        <member name="P:MassTransit.Configurators.ValidationResult.Value">
            <summary>
            The value associated with the result
            </summary>
        </member>
        <member name="T:MassTransit.Configurators.Configurator">
            <summary>
            Base interface for all MassTransit configurators. This interface only
            contains a method for validating the validity of the configuration.
            </summary>
        </member>
        <member name="M:MassTransit.Configurators.Configurator.Validate">
            <summary>
            Validate the configuration of this configurator, to make sure
            that you haven't done silly mistakes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerPipeConfiguratorExtensions.UseFilter``2(MassTransit.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0,``1}},MassTransit.Pipeline.IFilter{MassTransit.ConsumerConsumeContext{``0}})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The already built pipe</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseExecute``1(MassTransit.IPipeConfigurator{``0},System.Action{``0})">
            <summary>
            Executes a synchronous method on the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseExecuteAsync``1(MassTransit.IPipeConfigurator{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes an asynchronous method on the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecute(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.SendContext})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecuteAsync(MassTransit.ISendPipeConfigurator,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecute``1(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecuteAsync``1(MassTransit.ISendPipeConfigurator,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="T:MassTransit.IReceiveEndpointSpecification">
            <summary>
            Specification for configuring a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.FilterConfiguratorExtensions.UseFilter``1(MassTransit.IPipeConfigurator{``0},MassTransit.Pipeline.IFilter{``0})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.FilterConfiguratorExtensions.UseSendFilter``1(MassTransit.ISendPipeConfigurator,MassTransit.Pipeline.IFilter{MassTransit.SendContext{``0}})">
            <summary>
            Adds a filter to the send pipeline
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.FilterConfiguratorExtensions.UseSendFilter(MassTransit.ISendPipeConfigurator,MassTransit.Pipeline.IFilter{MassTransit.SendContext})">
            <summary>
            Adds a filter to the send pipeline
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="P:MassTransit.IInMemoryBusFactoryConfigurator.TransportConcurrencyLimit">
            <summary>
            Sets the maximum number of threads used by an in-memory transport, for partitioning
            the input queue. This setting also specifies how many threads will be used for dispatching
            messages to consumers. 
            </summary>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.SetTransportProvider``1(``0)">
            <summary>
            Sets the transport provider for the InMemory bus, used to share a transport cache between multiple
            bus instances. Normally this method is not used.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="transportProvider"></param>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.ReceiveEndpoint(System.String,System.Action{MassTransit.IInMemoryReceiveEndpointConfigurator})">
            <summary>
            Specify a receive endpoint for the bus, with the specified queue name
            </summary>
            <param name="queueName">The queue name for the receiving endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.InMemoryBus.Create(System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveEndpointConfigurator">
            <summary>
            Configure a receiving endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.InputAddress">
            <summary>
            Returns the input address of the receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.CreateUsingInMemory(MassTransit.IBusFactorySelector,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="selector">Hang off the selector interface for visibility</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPipeConfigurator`1">
            <summary>
            Configures a pipe with specifications
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.IPipeConfigurator`1.AddPipeSpecification(MassTransit.PipeConfigurators.IPipeSpecification{`0})">
            <summary>
            Adds a pipe specification to the pipe configurator at the end of the chain
            </summary>
            <param name="specification">The pipe specification to add</param>
        </member>
        <member name="M:MassTransit.IBusFactory.CreateBus">
            <summary>
            Create the bus, returning the bus control interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.ReceiveEndpoint(System.String,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Specify a receive endpoint for the bus, with the specified queue name
            </summary>
            <param name="queueName">The queue name for the receiving endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="P:MassTransit.ITransactionConfigurator.Timeout">
            <summary>
            Sets the transaction timeout
            </summary>
        </member>
        <member name="P:MassTransit.ITransactionConfigurator.IsolationLevel">
            <summary>
            Sets the isolation level of the transaction
            </summary>
        </member>
        <member name="M:MassTransit.ObserverExtensions.Observer``1(MassTransit.IReceiveEndpointConfigurator,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">Service Bus Service Configurator 
            - the item that is passed as a parameter to
            the action that is calling the configurator.</param>
            <param name="observer">The observer to connect to the endpoint</param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.ObserverExtensions.Observer``1(MassTransit.IReceiveEndpointConfigurator,System.IObserver{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.ConsumeConfigurators.IObserverConfigurator{``0}})">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">Service Bus Service Configurator 
            - the item that is passed as a parameter to
            the action that is calling the configurator.</param>
            <param name="observer">The observer to connect to the endpoint</param>
            <param name="configureCallback"></param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.ObserverExtensions.ConnectObserver``1(MassTransit.IBus,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a message observer to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="bus"></param>
            <param name="observer">The callback to invoke when messages of the specified type arrive on the service bus</param>
        </member>
        <member name="M:MassTransit.ObserverExtensions.ConnectRequestObserver``1(MassTransit.IBus,System.Guid,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Subscribe a request observer to the bus's endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="requestId"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.PipeBuilders.IPipeBuilder`1">
            <summary>
            A pipe builder constructs a pipe by adding filter to the end of the chain, after
            while the builder completes the pipe/filter combination.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
        </member>
        <member name="M:MassTransit.PipeBuilders.IPipeBuilder`1.AddFilter(MassTransit.Pipeline.IFilter{`0})">
            <summary>
            Add a filter to the pipe after any existing filters
            </summary>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.RateLimitExtensions.UseRateLimit``1(MassTransit.IPipeConfigurator{``0},System.Int32)">
            <summary>
            Specify a rate limit for message processing, so that only the specified number of messages are allowed
            per interval.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="rateLimit">The number of messages allowed per interval</param>
        </member>
        <member name="M:MassTransit.RateLimitExtensions.UseRateLimit``1(MassTransit.IPipeConfigurator{``0},System.Int32,System.TimeSpan)">
            <summary>
            Specify a rate limit for message processing, so that only the specified number of messages are allowed
            per interval.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="rateLimit">The number of messages allowed per interval</param>
            <param name="interval">The reset interval for each set of messages</param>
        </member>
        <member name="M:MassTransit.RepeatPipeConfiguratorExtensions.UseRepeat``1(MassTransit.IPipeConfigurator{``0},System.Threading.CancellationToken)">
            <summary>
            Repeat the subsequent filter pipe until the cancellationToken is cancelled.
            </summary>
            <typeparam name="T">The pipe type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="cancellationToken">The cancellationToken to cancel the repetition</param>
        </member>
        <member name="M:MassTransit.RescueFilterConfiguratorExtensions.UseRescue(MassTransit.IPipeConfigurator{MassTransit.ReceiveContext},MassTransit.Pipeline.IPipe{MassTransit.ExceptionReceiveContext},MassTransit.Policies.IPolicyExceptionFilter)">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="exceptionFilter"></param>
        </member>
        <member name="M:MassTransit.RetryPipeConfiguratorExtensions.UseRetry(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext},MassTransit.IRetryPolicy,System.Threading.CancellationToken)">
            <summary>
            Retry the subsequent filter pipe using the specified retry policy
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="retryPolicy">The retry policy</param>
            <param name="cancellationToken">The cancellation token to end the retry operations</param>
        </member>
        <member name="M:MassTransit.TransactionConfiguratorExtensions.UseTransaction``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.ITransactionConfigurator})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure the transaction pipe</param>
        </member>
        <member name="P:MassTransit.ConsumeContext.ReceiveContext">
            <summary>
            The original receive context
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.CompleteTask">
            <summary>
            An awaitable task that is completed once the consume context is completed
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.SupportedMessageTypes">
            <summary>
            Returns the supported message types from the message
            </summary>
        </member>
        <member name="M:MassTransit.ConsumeContext.HasMessageType(System.Type)">
            <summary>
                Returns true if the specified message type is contained in the serialized message
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContext.TryGetMessage``1(MassTransit.ConsumeContext{``0}@)">
            <summary>
                Returns the specified message type if available, otherwise returns false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="consumeContext"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
            <param name="sendPipe">The pipe used to customize the response send context</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
            <param name="sendPipe">The pipe used to customize the response send context</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,System.Type)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
            <param name="messageType">The message type to send</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,System.Type,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
            <param name="messageType">The message type to send</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.Respond``1(``0)">
            <summary>
            Adds a response to the message being consumed, which will be sent once the consumer
            has completed. The message is not acknowledged until the response is acknowledged.
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.NotifyConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Notify that the message has been consumed -- note that this is internal, and should not be called by a consumer.
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.NotifyFaulted``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a message consumer has faulted -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The message consumer type</param>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ConsumeContext`1.NotifyConsumed(System.TimeSpan,System.String)">
            <summary>
            Notify that the message has been consumed -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="duration"></param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ConsumeContext`1.NotifyFaulted(System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a fault occurred during message consumption -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="duration"></param>
            <param name="consumerType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:MassTransit.ConsumeContextExtensions.Forward``1(MassTransit.ConsumeContext,MassTransit.ISendEndpoint,``0)">
            <summary>
            Forward the message to another consumer
            </summary>
            <param name="context"></param>
            <param name="endpoint">The endpoint to forward the message tosaq</param>
            <param name="message"></param>
        </member>
        <member name="M:MassTransit.ConsumeContextExtensions.CreateCopyContextPipe(MassTransit.ConsumeContext,System.Func{MassTransit.ConsumeContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Create a send pipe that copies the source message headers to the message being sent
            </summary>
            <param name="context"></param>
            <param name="additionalHeaders">Returns additional headers for the pipe that should be added to the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextExtensions.CreateCopyContextPipe(MassTransit.ConsumeContext,System.Action{MassTransit.ConsumeContext,MassTransit.SendContext})">
            <summary>
            Create a send pipe that copies the source message headers to the message being sent
            </summary>
            <param name="context"></param>
            <param name="callback">A callback to modify the send context</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumerConsumeContext`2">
            <summary>
            A consumer and consume context mixed together, carrying both a consumer and the message
            consume context.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerConsumeContext`1.PopContext``1">
            <summary>
            Return the original consumer/message combined context, reapplying the message type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.ConsumerConsumeContext`1.Consumer">
            <summary>
            The consumer which will handle the message
            </summary>
        </member>
        <member name="T:MassTransit.MessageData`1">
            <summary>
            A big property is a message property that is stored outside the message transport
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.MessageData`1.Value">
            <summary>
            Returns the value of the property, which may be loaded asynchronously from the big storage
            </summary>
        </member>
        <member name="T:MassTransit.ExceptionInfo">
            <summary>
            An exception information that is serializable
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.ExceptionType">
            <summary>
            The type name of the exception
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.InnerException">
            <summary>
            The inner exception if present (also converted to ExceptionInfo)
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.StackTrace">
            <summary>
            The stack trace of the exception site
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.Message">
            <summary>
            The exception message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.Source">
            <summary>
            The exception source
            </summary>
        </member>
        <member name="T:MassTransit.HostInfo">
            <summary>
            The host where an event or otherwise was produced
            a routing slip
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.MachineName">
            <summary>
            The machine name (or role instance name) of the local machine
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.ProcessName">
            <summary>
            The process name hosting the routing slip activity
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.ProcessId">
            <summary>
            The processId of the hosting process
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.Assembly">
            <summary>
            The assembly where the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.AssemblyVersion">
            <summary>
            The assembly version of the assembly where the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.FrameworkVersion">
            <summary>
            The .NET framework version
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.MassTransitVersion">
            <summary>
            The version of MassTransit used by the process
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.OperatingSystemVersion">
            <summary>
            The operating system version hosting the application
            </summary>
        </member>
        <member name="T:MassTransit.IBus">
            <summary>
            A bus is a logical element that includes a local endpoint and zero or more receive endpoints
            </summary>
        </member>
        <member name="P:MassTransit.IBus.Address">
            <summary>
            The receive address of the bus itself, versus any receive endpoints that were created
            </summary>
        </member>
        <member name="T:MassTransit.Headers">
            <summary>
            Headers are used to store value outside of a message body that are transported with 
            the message content.
            </summary>
        </member>
        <member name="M:MassTransit.Headers.GetAll">
            <summary>
            Returns all available headers
            </summary>
        </member>
        <member name="M:MassTransit.Headers.TryGetHeader(System.String,System.Object@)">
            <summary>
            If the specified header name is found, returns the value of the header as an object
            </summary>
            <param name="key">The header name</param>
            <param name="value">The output header value</param>
            <returns>True if the header was found, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Headers.Get``1(System.String,``0)">
            <summary>
            Returns the specified header as the type, returning a default value is the header is not found
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="key">The header name</param>
            <param name="defaultValue">The default value of the header if not found</param>
            <returns>The header value</returns>
        </member>
        <member name="M:MassTransit.Headers.Get``1(System.String,System.Nullable{``0})">
            <summary>
            Returns the specified header as the type, returning a default value is the header is not found
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="key">The header name</param>
            <param name="defaultValue">The default value of the header if not found</param>
            <returns>The header value</returns>
        </member>
        <member name="M:MassTransit.IBusControl.Start">
            <summary>
            Starts the bus (assuming the battery isn't dead). Once the bus has been started, it cannot be started again, even after is has been stopped.
            </summary>
            <returns>The BusHandle for the started bus. This is no longer needed, as calling Stop on the IBusControl will stop the bus equally well.</returns>
        </member>
        <member name="M:MassTransit.IBusControl.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the bus (assuming the battery isn't dead). Once the bus has been started, it cannot be started again, even after is has been stopped.
            </summary>
            <returns>The BusHandle for the started bus. This is no longer needed, as calling Stop on the IBusControl will stop the bus equally well.</returns>
        </member>
        <member name="M:MassTransit.IBusControl.Stop(System.Threading.CancellationToken)">
            <summary>
            Stops the bus if it has been started. If the bus hasn't been started, the method returns without any warning.
            </summary>
        </member>
        <member name="M:MassTransit.IBusControl.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the bus if it has been started. If the bus hasn't been started, the method returns without any warning.
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveObserverConnector.ConnectReceiveObserver(MassTransit.IReceiveObserver)">
            <summary>
            Connect an observer to the receiving endpoint
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumer`1">
            <summary>
                Defines a class that is a consumer of a message. The message is wrapped in an IConsumeContext
                interface to allow access to details surrounding the inbound message, including headers.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.IConsumer">
            <summary>
                Marker interface used to assist identification in IoC containers.
                Not to be used directly as it does not contain the message type of the
                consumer
            </summary>
            <remarks>
                Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="P:MassTransit.IFault.FaultType">
            <summary>
            The type of fault that occurred
            </summary>
        </member>
        <member name="P:MassTransit.IFault.Messages">
            <summary>
            Messages associated with the exception
            </summary>
        </member>
        <member name="P:MassTransit.IFault.OccurredAt">
            <summary>
            When the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.IFault.StackTrace">
            <summary>
            A stack trace related to the exception
            </summary>
        </member>
        <member name="T:MassTransit.IMessageSerializer">
            <summary>
            A message serializer is responsible for serializing a message. Shocking, I know.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageSerializer.Serialize``1(System.IO.Stream,MassTransit.SendContext{``0})">
            <summary>
            Serialize the message to the stream provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="M:MassTransit.Internals.Extensions.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the member specified
            </summary>
            <typeparam name="T">The type referenced</typeparam>
            <typeparam name="TMember">The type of the member referenced</typeparam>
            <param name="expression">The expression referencing the member</param>
            <returns>The name of the member referenced by the expression</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the name of the member specified
            </summary>
            <typeparam name="T">The type referenced</typeparam>
            <param name="expression">The expression referencing the member</param>
            <returns>The name of the member referenced by the expression</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsConcrete(System.Type)">
            <summary>
            Determines if a type is neither abstract nor an interface and can be constructed.
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type can be constructed, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsConcreteAndAssignableTo(System.Type,System.Type)">
            <summary>
            Determines if a type can be constructed, and if it can, additionally determines
            if the type can be assigned to the specified type.
            </summary>
            <param name="type">The type to evaluate</param>
            <param name="assignableType">The type to which the subject type should be checked against</param>
            <returns>True if the type is concrete and can be assigned to the assignableType, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsConcreteAndAssignableTo``1(System.Type)">
            <summary>
            Determines if a type can be constructed, and if it can, additionally determines
            if the type can be assigned to the specified type.
            </summary>
            <param name="type">The type to evaluate</param>
            <typeparam name="T">The type to which the subject type should be checked against</typeparam>
            <returns>True if the type is concrete and can be assigned to the assignableType, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines if the type is a nullable type
            </summary>
            <param name="type">The type</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsNullable(System.Type,System.Type@)">
            <summary>
            Determines if the type is a nullable type
            </summary>
            <param name="type">The type</param>
            <param name="underlyingType">The underlying type of the nullable</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsOpenGeneric(System.Type)">
            <summary>
            Determines if the type is an open generic with at least one unspecified generic argument
            </summary>
            <param name="type">The type</param>
            <returns>True if the type is an open generic</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.CanBeNull(System.Type)">
            <summary>
            Determines if a type can be null
            </summary>
            <param name="type">The type</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.GetTypeName(System.Type)">
            <summary>
            Returns an easy-to-read type name from the specified Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the first attribute of the specified type for the object specified
            </summary>
            <typeparam name="T">The type of attribute</typeparam>
            <param name="provider">An attribute provider, which can be a MethodInfo, PropertyInfo, Type, etc.</param>
            <returns>The attribute instance if found, or null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Determines if the target has the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Internals.Mapping.DictionaryConverterCache">
            <summary>
            Caches the type converter instances
            </summary>
        </member>
        <member name="T:MassTransit.Internals.Mapping.DynamicObjectConverterCache">
            <summary>
            Caches dictionary to object converters for the types requested, including the implementation
            builder for interfaces that are dynamically proxied
            </summary>
        </member>
        <member name="T:MassTransit.IPublishEndpoint">
            <summary>
            A publish endpoint lets the underlying transport determine the actual endpoint to which
            the message is sent. For example, an exchange on RabbitMQ and a topic on Azure Service bus.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.</para>
            
            <para>
            Read up on publishing: http://readthedocs.org/docs/masstransit/en/latest/overview/publishing.html
            </para>
            </summary>
            <typeparam name = "T">The type of the message</typeparam>
            <param name = "message">The messages to be published</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,MassTransit.Pipeline.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.</para>
            
            <para>
            Read up on publishing: http://readthedocs.org/docs/masstransit/en/latest/overview/publishing.html
            </para>
            </summary>
            <typeparam name = "T">The type of the message</typeparam>
            <param name = "message">The messages to be published</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,MassTransit.Pipeline.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.</para>
            
            <para>
            Read up on publishing: http://readthedocs.org/docs/masstransit/en/latest/overview/publishing.html
            </para>
            </summary>
            <typeparam name = "T">The type of the message</typeparam>
            <param name = "message">The messages to be published</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,MassTransit.Pipeline.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Type,MassTransit.Pipeline.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            <see cref="!:IBus.Publish&lt;T&gt;(T,CancellationToken)"/>: this is a "dynamically"
            typed overload - give it an interface as its type parameter,
            and a loosely typed dictionary of values and the MassTransit
            underlying infrastructure will populate an object instance
            with the passed values. It actually does this with DynamicProxy
            in the background.
            </summary>
            <typeparam name="T">The type of the interface or
            non-sealed class with all-virtual members.</typeparam>
            <param name="values">The dictionary of values to place in the
            object instance to implement the interface.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,MassTransit.Pipeline.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            <see cref="!:IBus.Publish&lt;T&gt;(T,CancellationToken)"/>: this
            overload further takes an action; it allows you to set <see cref="T:MassTransit.PublishContext"/>
            meta-data. Also <see cref="!:IBus.Publish&lt;T&gt;(T,CancellationToken)"/>.
            </summary>
            <typeparam name="T">The type of the message to publish</typeparam>
            <param name="values">The dictionary of values to become hydrated and
            published under the type of the interface.</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,MassTransit.Pipeline.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            <see cref="!:IBus.Publish&lt;T&gt;(T,CancellationToken)"/>: this
            overload further takes an action; it allows you to set <see cref="T:MassTransit.PublishContext"/>
            meta-data. Also <see cref="!:IBus.Publish&lt;T&gt;(T,CancellationToken)"/>.
            </summary>
            <typeparam name="T">The type of the message to publish</typeparam>
            <param name="values">The dictionary of values to become hydrated and
            published under the type of the interface.</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:MassTransit.IReceiveEndpoint">
            <summary>
            A service endpoint has a inbound transport that pushes messages to consumers
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpoint.Start">
            <summary>
            Starts recieving from the inbound transport.
            </summary>
            <returns>A handle to the receiving endpoint, which is used to stop it</returns>
        </member>
        <member name="T:MassTransit.IReceiveObserver">
            <summary>
            An observer that can monitor a receive endpoint to track message consumption at the 
            endpoint level.
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PreReceive(MassTransit.ReceiveContext)">
            <summary>
            Called when a message has been delivered by the transport is about to be received by the endpoint
            </summary>
            <param name="context">The receive context of the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PostReceive(MassTransit.ReceiveContext)">
            <summary>
            Called when the message has been received and acknowledged on the transport
            </summary>
            <param name="context">The receive context of the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PostConsume``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Called when a message has been consumed by a consumer
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="duration">The consumer duration</param>
            <param name="consumerType">The consumer type</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.ConsumeFault``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Called when a message being consumed produced a fault
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="duration">The consumer duration</param>
            <param name="consumerType">The consumer type</param>
            <param name="exception">The exception from the consumer</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.ReceiveFault(MassTransit.ReceiveContext,System.Exception)">
            <summary>
            Called when the transport receive faults
            </summary>
            <param name="context">The receive context of the message</param>
            <param name="exception">The exception that was thrown</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Type,MassTransit.Pipeline.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.ISendEndpointProvider">
            <summary>
            The Send Endpoint Provider is used to retrieve endpoints using addresses. The interface is
            available both at the bus and within the context of most message receive handlers, including
            the consume context, saga context, consumer context, etc. The most local provider should be
            used to ensure message continuity is maintained.
            </summary>
        </member>
        <member name="M:MassTransit.ISendEndpointProvider.GetSendEndpoint(System.Uri)">
            <summary>
            Return the send endpoint for the specified address
            </summary>
            <param name="address">The endpoint address</param>
            <returns>The send endpoint</returns>
        </member>
        <member name="T:MassTransit.MessageContext">
            <summary>
            The message context includes the headers that are transferred with the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.MessageId">
            <summary>
            The messageId assigned to the message when it was initially Sent. This is different
            than the transport MessageId, which is only for the Transport.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.RequestId">
            <summary>
            If the message is a request, or related to a request, such as a response or a fault,
            this contains the requestId.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.CorrelationId">
            <summary>
            If the message implements the CorrelatedBy(Guid) interface, this field should be 
            populated by default to match that value. It can, of course, be overwritten with
            something else.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ConversationId">
            <summary>
            The conversationId of the message, which is copied and carried throughout the message
            flow by the infrastructure.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.InitiatorId">
            <summary>
            If this message was produced within the context of a previous message, the CorrelationId
            of the message is contained in this property. If the message was produced from a saga
            instance, the CorrelationId of the saga is used.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ExpirationTime">
            <summary>
            The expiration time of the message if it is not intended to last forever.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.SourceAddress">
            <summary>
            The address of the message producer that sent the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.DestinationAddress">
            <summary>
            The destination address of the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ResponseAddress">
            <summary>
            The response address to which responses to the request should be sent
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.FaultAddress">
            <summary>
            The fault addres to which fault events should be sent if the message consumer faults
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.Headers">
            <summary>
            Additional application-specific headers that are added to the message by the application
            or by features within MassTransit, such as when a message is moved to an error queue.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.Host">
            <summary>
            The host information of the message producer. This may not be present if the message was sent
            from an earlier version of MassTransit.
            </summary>
        </member>
        <member name="T:MassTransit.MessageHandler`1">
            <summary>
            A message handler is a delegate type that asynchronously consumes the message
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="context">The consume context</param>
            <returns>An awaitable task that is completed once the message has been consumed</returns>
        </member>
        <member name="F:MassTransit.MessageHeaders.Reason">
            <summary>
            The reason for a message action being taken 
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultMessage">
            <summary>
            The exception message from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultTimestamp">
            <summary>
            The timestamp when the fault occurred
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultStackTrace">
            <summary>
            The stack trace from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ForwarderAddress">
            <summary>
            The endpoint that forwarded the message to the new destination
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.DeliveredAddress">
            <summary>
            The address where the message was originally delivered before being rescheduled
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.SchedulingTokenId">
            <summary>
            The tokenId for the message that was registered with the scheduler
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.RedeliveryCount">
            <summary>
            The number of times the message has been redelivered (zero if never)
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.QuartzTriggerKey">
            <summary>
            The trigger key that was used when the scheduled message was trigger
            </summary>
        </member>
        <member name="T:MassTransit.MessageRedeliveryContext">
            <summary>
            Used to reschedule delivery of the current message
            </summary>
        </member>
        <member name="M:MassTransit.MessageRedeliveryContext.ScheduleRedelivery(System.TimeSpan)">
            <summary>
            Schedule the message to be redelivered after the specified delay.
            </summary>
            <param name="delay">The minimum delay before the message will be redelivered to the queue</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageRequestClient`2">
            <summary>
            Implements a request client that uses specified endpoint to send the request and return the
            response task.
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
        </member>
        <member name="M:MassTransit.MessageRequestClient`2.#ctor(MassTransit.IBus,System.Uri,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{`0}})">
            <summary>
            Creates a message request client for the bus and endpoint specified
            </summary>
            <param name="bus">The bus instance</param>
            <param name="address">The service endpoint address</param>
            <param name="timeout">The request timeout</param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.CancelScheduledSend``1(MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message by the scheduled message (uses the TokenId)
            </summary>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.CancelScheduledSend(System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.Monitoring.Introspection.Contracts.ProbeResult">
            <summary>
            The result of a probe
            </summary>
        </member>
        <member name="P:MassTransit.Monitoring.Introspection.Contracts.ProbeResult.ResultId">
            <summary>
            Unique identifies this result
            </summary>
        </member>
        <member name="P:MassTransit.Monitoring.Introspection.Contracts.ProbeResult.ProbeId">
            <summary>
            Identifies the initiator of the probe
            </summary>
        </member>
        <member name="P:MassTransit.Monitoring.Introspection.Contracts.ProbeResult.StartTimestamp">
            <summary>
            When the probe was initiated through the system
            </summary>
        </member>
        <member name="P:MassTransit.Monitoring.Introspection.Contracts.ProbeResult.Duration">
            <summary>
            How long the probe took to execute
            </summary>
        </member>
        <member name="P:MassTransit.Monitoring.Introspection.Contracts.ProbeResult.Host">
            <summary>
            The host from which the result was generated
            </summary>
        </member>
        <member name="P:MassTransit.Monitoring.Introspection.Contracts.ProbeResult.Results">
            <summary>
            The results returned by the probe
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.ConsumerPerformanceCounter">
            <summary>
            Tracks the consumption and failure of a consumer processing messages. The message types
            in this case are not included in the counter, only the consumer itself.
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterReceiveObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="M:MassTransit.Pipe.New``1(System.Action{MassTransit.IPipeConfigurator{``0}})">
            <summary>
            Create a new pipe using the pipe configurator to add filters, etc.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="callback">The configuration callback</param>
            <returns>An initialized pipe ready for use</returns>
        </member>
        <member name="M:MassTransit.Pipe.Execute``1(System.Action{``0})">
            <summary>
            Constructs a simple pipe that executes the specified action
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="action">The method to execute</param>
            <returns>The constructed pipe</returns>
        </member>
        <member name="M:MassTransit.Pipe.ExecuteAsync``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Constructs a simple pipe that executes the specified action
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="action">The method to execute</param>
            <returns>The constructed pipe</returns>
        </member>
        <member name="M:MassTransit.Pipe.Empty``1">
            <summary>
            Returns an empty pipe of the specified context type
            </summary>
            <typeparam name="T">The context type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.PipeContext">
            <summary>
            The base context for all pipe types, includes the payload sidebanding of data
            with the payload, as well as the cancellationToken to avoid passing it everywhere
            </summary>
        </member>
        <member name="P:MassTransit.PipeContext.CancellationToken">
            <summary>
            Used to cancel the execution of the context
            </summary>
        </member>
        <member name="M:MassTransit.PipeContext.HasPayloadType(System.Type)">
            <summary>
            Checks if a payload is present in the context
            </summary>
            <param name="contextType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PipeContext.TryGetPayload``1(``0@)">
            <summary>
            Retrieves a payload from the pipe context
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PipeContext.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Returns an existing payload or creates the payload using the factory method provided
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="payloadFactory">The payload factory is the payload is not present</param>
            <returns>The payload</returns>
        </member>
        <member name="M:MassTransit.PipeExtensions.GetPayload``1(MassTransit.PipeContext)">
            <summary>
            Get a payload from the pipe context
            </summary>
            <typeparam name="T">The payload type</typeparam>
            <param name="context">The pipe context</param>
            <returns>The payload, or throws a PayloadNotFoundException if the payload is not present</returns>
        </member>
        <member name="T:MassTransit.Pipeline.ConsumerFactories.InstanceConsumerFactory`1">
            <summary>
            Retains a reference to an existing message consumer, and uses it to send consumable messages for
            processing.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.CircuitBreakerSettings.TrackingPeriod">
            <summary>
            The window duration to keep track of errors before they fall off the breaker state
            </summary>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.CircuitBreakerSettings.ResetTimeout">
            <summary>
            The time to wait after the breaker has opened before attempting to close it
            </summary>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.CircuitBreakerSettings.TripThreshold">
            <summary>
            A percentage of how many failures versus successful calls before the breaker
            is opened. Should be 0-100, but seriously like 5-10.
            </summary>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.CircuitBreakerSettings.ActiveThreshold">
            <summary>
            The active count of attempts before the circuit breaker can be tripped
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker">
            <summary>
            Provides access to a circuit breaker from a state object
            </summary>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker.TripThreshold">
            <summary>
            The number of failures before opening the circuit breaker
            </summary>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker.ActiveThreshold">
            <summary>
            The minimum number of attempts before the breaker can possibly trip
            </summary>
        </member>
        <member name="P:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker.OpenDuration">
            <summary>
            Window duration before attempt/success/failure counts are reset
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker.Open(System.Exception,MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreakerBehavior,System.Collections.Generic.IEnumerator{System.TimeSpan})">
            <summary>
            Open the circuit breaker, preventing any further access to the resource until
            the timer expires
            </summary>
            <param name="exception">The exception to return when the circuit breaker is accessed</param>
            <param name="behavior"></param>
            <param name="timeoutEnumerator">A previously created enumerator for a timeout period</param>
        </member>
        <member name="M:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker.ClosePartially(System.Exception,System.Collections.Generic.IEnumerator{System.TimeSpan},MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreakerBehavior)">
            <summary>
            Partially open the circuit breaker, allowing the eventual return to a closed
            state
            </summary>
            <param name="exception"></param>
            <param name="timeoutEnumerator"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreaker.Close(MassTransit.Pipeline.Filters.CircuitBreaker.ICircuitBreakerBehavior)">
            <summary>
            Close the circuit breaker, allowing normal execution
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.CircuitBreaker.ClosedBehavior">
            <summary>
            Represents a closed, normally operating circuit breaker state
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.CircuitBreaker.OpenBehavior">
            <summary>
            Represents a circuit that is unavailable, with a timer waiting to partially close
            the circuit.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.CircuitBreaker.HalfOpenBehavior">
            <summary>
            Executes until the success count is met. If a fault occurs before the success 
            count is reached, the circuit reopens.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConcurrencyLimit.ConcurrencyLimitFilter`1">
            <summary>
            Limits the concurrency of the next section of the pipeline based on the concurrency limit
            specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.Filters.ConcurrencyLimit.ConcurrencyLimitFilter`1.WaitForRunningTasks(System.Threading.CancellationToken)">
            <summary>
            A hack, but waits for any tasks that have been sent through the filter to complete by
            waiting and taking all the concurrent slots
            </summary>
            <param name="cancellationToken">Of course we can cancel the operation</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConcurrencyLimit.ConcurrencyLimitFilterManagementConsumer">
            <summary>
            Consumer which when connected to a management bus can control the concurrency
            limit.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConsumerMessageFilter`2">
            <summary>
            Consumes a message via Consumer, resolved through the consumer factory and notifies
            the context that the message was consumed.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConsumerSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.DeadLetterFilter">
            <summary>
            If a message was neither delivered to a consumer nor caused a fault (which was notified already)
            then this filter will send the message to the dead letter pipe.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.LatestFilter`1">
            <summary>
            Retains the last value that was sent through the filter, usable as a source to a join pipe
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MessagePublishFilter`1">
            <summary>
            Maintains the Publish middleware for a message type, as well as the observers for the Publish
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MessageSendFilter`1">
            <summary>
            Maintains the send middleware for a message type, as well as the observers for the send
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MoveToTransportFilter">
            <summary>
            Moves a message received to a transport without any deserialization
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.Filters.Outbox.OutboxSendEndpoint.#ctor(MassTransit.Context.OutboxContext,MassTransit.ISendEndpoint)">
            <summary>
            Creates an send endpoint on the outbox
            </summary>
            <param name="outboxContext">The outbox context for this consume operation</param>
            <param name="endpoint">The actual endpoint returned by the transport</param>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.Partitioner.IHashGenerator">
            <summary>
            Generates a hash of the input data for partitioning purposes
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RedeliveryRetryFilter`1">
            <summary>
            Uses the message redelivery mechanism, if available, to delay a retry without blocking message delivery
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.DeserializeFilter">
            <summary>
            Performs the deserialization of a message ReceiveContext and passes the resulting
            ConsumeContext to the output pipe.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.HandlerMessageFilter`1">
            <summary>
            Consumes a message via a message handler and reports the message as consumed or faulted
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.InstanceMessageFilter`2">
            <summary>
            Consumes a message via an existing class instance
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RequestConsumeFilter`2">
            <summary>
            Handles the registration of requests and connecting them to the consume pipe
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.LegacyMethodConsumerMessageFilter`2">
            <summary>
                Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MessageConsumeFilter`1">
            <summary>
            Converts a ConsumeContext to a message type and passes the context to 
            the output pipe. Supports interception by message type.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MessageSchedulerFilter">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MethodConsumerMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MoveExceptionToTransportFilter">
            <summary>
            In the case of an exception, the message is moved to the destination transport. If the receive had not yet been
            faulted, a fault is generated.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ObserverMessageFilter`1">
            <summary>
            Consumes a message via a message handler and reports the message as consumed or faulted
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RateLimitFilter`1">
            <summary>
            Limits the concurrency of the next section of the pipeline based on the concurrency limit
            specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RepeatFilter`1">
            <summary>
            Uses a retry policy to handle exceptions, retrying the operation in according
            with the policy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RequestPipeFilter`2">
            <summary>
            Captures the pipe for a request response message so that it can be dispatched upon receipt of
            a correlated message.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RescueConsumeFilter`1">
            <summary>
            Rescue catches an exception, and if the exception matches the exception filter,
            passes control to the rescue pipe.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RescueExceptionFilter">
            <summary>
            Given the exception, should determine if the exception should cause
            the pipe to follow the rescue path instead of throwing the exception
            back up the pipeline.
            </summary>
            <param name="exception">The exception that occurred</param>
            <returns>True if the context should be sent through the rescue pipe, otherwise false.</returns>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RescueReceiveContextFilter`1">
            <summary>
            Catches a pipeline exception and determines if the rescue pipe should be passed
            control of the context.
            </summary>
            <typeparam name="T">The filter type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RetryFilter">
            <summary>
            Uses a retry policy to handle exceptions, retrying the operation in according
            with the policy
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RetryFilter`1">
            <summary>
            Uses a retry policy to handle exceptions, retrying the operation in according
            with the policy
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ScheduleMessageRedeliveryFilter`1">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.TeeConsumeFilter`1">
            <summary>
            Connects multiple output pipes to a single input pipe
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.TransformFilter`1">
            <summary>
            Applies a transform to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.WireTapFilter`1">
            <summary>
            A wiretap allows an asynchronous pipe to process the message while the original pipe continues to process
            the message.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumeObserver">
            <summary>
            Intercepts the ConsumeContext
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.IConsumeObserver.PreConsume``1(MassTransit.ConsumeContext{``0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IConsumeObserver.PostConsume``1(MassTransit.ConsumeContext{``0})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IConsumeObserver.ConsumeFault``1(MassTransit.ConsumeContext{``0},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumeObserverConnector">
            <summary>
            Supports connection of a consume observer
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumerMessageFilter`2">
            <summary>
            Adapts a consumer to consume the message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.IFilter`1">
            <summary>
            A filter is a functional node in a pipeline, connected by pipes to
            other filters.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.IFilter`1.Send(`0,MassTransit.Pipeline.IPipe{`0})">
            <summary>
            Sends a context to a filter, such that it can be processed and then passed to the
            specified output pipe for further processing.
            </summary>
            <param name="context">The pipe context type</param>
            <param name="next">The next pipe in the pipeline</param>
            <returns>An awaitable Task</returns>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumeMessageObserver`1">
            <summary>
            Intercepts the ConsumeContext<typeparam name="T">T</typeparam>
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.IConsumeMessageObserver`1.PreConsume(MassTransit.ConsumeContext{`0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IConsumeMessageObserver`1.PostConsume(MassTransit.ConsumeContext{`0})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IConsumeMessageObserver`1.ConsumeFault(MassTransit.ConsumeContext{`0},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumeMessageObserverConnector">
            <summary>
            Supports connection of a message observer to the pipeline
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.IPipe`1.Send(`0)">
            <summary>
            The base primitive, Send delivers the pipe context of T to the pipe.
            </summary>
            <param name="context">The pipe context of type T</param>
            <returns>A task which is completed once the pipe has processed the context</returns>
        </member>
        <member name="T:MassTransit.Pipeline.IPublishMessageObserver`1">
            <summary>
            Observes messages as they are published via a publish endpoint. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.IPublishMessageObserver`1.PrePublish(MassTransit.PublishContext{`0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IPublishMessageObserver`1.PostPublish(MassTransit.PublishContext{`0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IPublishMessageObserver`1.PublishFault(MassTransit.PublishContext{`0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IPublishObserver">
            <summary>
            Observes messages as they are published via a publish endpoint. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.IPublishObserver.PrePublish``1(MassTransit.PublishContext{``0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IPublishObserver.PostPublish``1(MassTransit.PublishContext{``0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.IPublishObserver.PublishFault``1(MassTransit.PublishContext{``0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IPublishObserverConnector">
            <summary>
            Connect an observer that is notified when a message is sent to an endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.IRequestPipeConnector">
            <summary>
            Connect a request pipe to the pipeline
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.IRequestPipeConnector.ConnectRequestPipe``1(System.Guid,MassTransit.Pipeline.IPipe{MassTransit.ConsumeContext{``0}})">
            <summary>
            Connect the consume pipe to the pipeline for messages with the specified RequestId header
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestId"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IRequestPipeConnector`1">
            <summary>
            A connector for a pipe by request id
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.IRequestPipeConnector`1.ConnectRequestPipe(System.Guid,MassTransit.Pipeline.IPipe{MassTransit.ConsumeContext{`0}})">
            <summary>
            Connect the consume pipe to the pipeline for messages with the specified RequestId header
            </summary>
            <param name="requestId"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.ISendInterceptor`1">
            <summary>
            Allows a message to be intercepted during Send
            this is probably a bad idea given the use of middleware as a better method
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.ISendInterceptor`1.PreSerialize(MassTransit.SendContext{`0})">
            <summary>
            Called before the message is serialized
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendInterceptor`1.PreSend(MassTransit.SendContext{`0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendInterceptor`1.PostSend(MassTransit.SendContext{`0})">
            <summary>
            Called after the message has been sent to the transport
            </summary>
            <param name="context">The send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendInterceptor`1.Acknowledged(MassTransit.SendContext{`0})">
            <summary>
            Called after the message has been acknowledged by the transport.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendInterceptor`1.SendFaulted(MassTransit.SendContext{`0},System.Exception)">
            <summary>
            Called if the message has failed to send or was not (or negatively) acknowledged by the transport.
            </summary>
            <param name="context"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.ISendMessageObserver`1">
            <summary>
            Observes messages as they are sent to transports. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.ISendMessageObserver`1.PreSend(MassTransit.SendContext{`0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendMessageObserver`1.PostSend(MassTransit.SendContext{`0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendMessageObserver`1.SendFault(MassTransit.SendContext{`0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.ISendObserver">
            <summary>
            Observes messages as they are sent to transports. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.ISendObserver.PreSend``1(MassTransit.SendContext{``0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendObserver.PostSend``1(MassTransit.SendContext{``0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipeline.ISendObserver.SendFault``1(MassTransit.SendContext{``0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.ISendObserverConnector">
            <summary>
            Connect an observer that is notified when a message is sent to an endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.ConsumerMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the pipe
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.LastPipe`1">
            <summary>
            The last pipe in a pipeline is always an end pipe that does nothing and returns synchronously
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Policies.IRetryContext.CanRetry(System.Exception,System.TimeSpan@)">
            <summary>
            Determines if the exception can be retried per the retry policy
            </summary>
            <param name="exception"></param>
            <param name="delay">The delay before the retry</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Policies.IPolicyExceptionFilter">
            <summary>
            Filter exceptions for policies that act based on an exception
            </summary>
        </member>
        <member name="M:MassTransit.Policies.IPolicyExceptionFilter.Match(System.Exception)">
            <summary>
            Returns true if the exception matches the filter and the policy should
            be applied to the exception.
            </summary>
            <param name="exception">The exception</param>
            <returns>True if the exception matches the filter, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Policies.Repeat.UntilCancelled(System.Threading.CancellationToken)">
            <summary>
            Repeat until cancelled using the cancellationToken
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ProbeContext">
            <summary>
            Passed to a probe site to inspect it for interesting things
            </summary>
        </member>
        <member name="P:MassTransit.ProbeContext.CancellationToken">
            <summary>
            If for some reason the probe is cancelled, allowing an early withdrawl
            </summary>
        </member>
        <member name="M:MassTransit.ProbeContext.Add(System.String,System.String)">
            <summary>
            Add a key/value pair to the current probe context
            </summary>
            <param name="key">The key name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:MassTransit.ProbeContext.Add(System.String,System.Object)">
            <summary>
            Add a key/value pair to the current probe context
            </summary>
            <param name="key">The key name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:MassTransit.ProbeContext.Set(System.Object)">
            <summary>
            Add the properties of the object as key/value pairs to the current context
            </summary>
            <param name="values">The object (typically anonymous with new{}</param>
        </member>
        <member name="M:MassTransit.ProbeContext.Set(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Add the values from the enumeration as key/value pairs
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:MassTransit.PublishContext.Mandatory">
            <summary>
            True if the message must be delivered to a subscriber
            </summary>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,``0,System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,``0,System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Type,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Type,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,System.Object,System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,System.Object,System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.PublishRequestClient`2">
            <summary>
            Implements a request client that allows a message to be published, versus sending to a specific endpoint
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
        </member>
        <member name="M:MassTransit.PublishRequestClient`2.#ctor(MassTransit.IBus,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{`0}})">
            <summary>
            Creates a message request client for the bus and endpoint specified
            </summary>
            <param name="bus">The bus instance</param>
            <param name="timeout">The request timeout</param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="callback"></param>
        </member>
        <member name="T:MassTransit.ReceiveContext">
            <summary>
            The receive context is sent from the transport when a message is ready to be processed
            from the transport.
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.InputAddress">
            <summary>
            The address on which the message was received
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.ContentType">
            <summary>
            The content type of the message, as determined by the available headers
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.TransportHeaders">
            <summary>
            Headers specific to the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.CompleteTask">
            <summary>
            The task that is completed once all pending tasks are completed
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.IsDelivered">
            <summary>
            Returns true if the message was successfully consumed by at least one consumer
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.IsFaulted">
            <summary>
            Returns true if a fault occurred during the message delivery
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveContext.GetBody">
            <summary>
            Returns the message body as a stream that can be deserialized. The stream
            must be disposed by the caller, a reference is not retained
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Notify that a message has been consumed from the received context
            </summary>
            <param name="context">The consume context of the message</param>
            <param name="duration"></param>
            <param name="consumerType"></param>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyFaulted``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a message consumer faulted
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The messsage consumer type that faulted</param>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyFaulted(System.Exception)">
            <summary>
            Notify that a message receive faulted outside of the message consumer
            </summary>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.AddPendingTask(System.Threading.Tasks.Task)">
            <summary>
            Adds a pending Task to the completion of the message receiver
            </summary>
            <param name="task"></param>
        </member>
        <member name="P:MassTransit.ReceiveEndpointCompleted.DeliveryCount">
            <summary>
            The number of messages delivered to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointCompleted.ConcurrentDeliveryCount">
            <summary>
            The maximum concurrent messages delivery to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointEvent.InputAddress">
            <summary>
            The input address of the receive endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Request`1">
            <summary>
            A sent request, that may be in-process until the request task is completed
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
        </member>
        <member name="P:MassTransit.Request`1.Task">
            <summary>
            An awaitable Task that is completed when the request is completed, or faulted
            in the case of an error or timeout
            </summary>
        </member>
        <member name="T:MassTransit.IRequestClient`2">
            <summary>
            An abstraction that allows a message handler to respond to a request with all
            processing handled under the covers
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
        </member>
        <member name="M:MassTransit.IRequestClient`2.Request(`0,System.Threading.CancellationToken)">
            <summary>
            Send the request, and complete the response task when the response is received. If
            the request times out, a RequestTimeoutException is thrown. If the remote service 
            returns a fault, the task is set to exception status.
            </summary>
            <param name="request">The request message</param>
            <param name="cancellationToken">A cancellation token for the request</param>
            <returns>The response Task</returns>
        </member>
        <member name="M:MassTransit.RequestClientExtensions.CreateRequestClient``2(MassTransit.IBus,System.Uri,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client that uses the bus to retrieve the endpoint and send the request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="bus">The bus on which the client is created</param>
            <param name="address">The service address that handles the request</param>
            <param name="timeout">The timeout before the request is cancelled</param>
            <param name="ttl">THe time to live for the request message</param>
            <param name="callback">Callback when the request is sent</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestClientExtensions.CreatePublishRequestClient``2(MassTransit.IBus,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client that uses the bus to publish a request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="bus">The bus on which the client is created</param>
            <param name="timeout">The timeout before the request is cancelled</param>
            <param name="callback">Callback when the request is sent</param>
            <param name="ttl">The time that the request will live for</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.RequestContext`1">
            <summary>
            Sending of a request, allowing specification of response handlers, etc.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="P:MassTransit.RequestContext`1.Task">
            <summary>
            The request Task
            </summary>
        </member>
        <member name="T:MassTransit.RequestContext">
            <summary>
            Allows the request to be configured, specifying handlers, synchronization context,
            and timeout values
            </summary>
        </member>
        <member name="P:MassTransit.RequestContext.Timeout">
            <summary>
            The timeout before the pending tasks are cancelled
            </summary>
        </member>
        <member name="P:MassTransit.RequestContext.Task">
            <summary>
            The request Task
            </summary>
        </member>
        <member name="M:MassTransit.RequestContext.UseCurrentSynchronizationContext">
            <summary>
            Specify that the current synchronization context should be used for the request
            </summary>
        </member>
        <member name="M:MassTransit.RequestContext.SetTaskScheduler(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Set the synchronization context used for the request and related handlers
            </summary>
            <param name="taskScheduler"></param>
        </member>
        <member name="M:MassTransit.RequestContext.Watch``1(MassTransit.MessageHandler{``0})">
            <summary>
            Configures a watcher to be called when a specified type is received. Messages
            received do not complete the request, but are merely observed while the request
            is pending.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The message handler invoked</param>
        </member>
        <member name="M:MassTransit.RequestContext.Handle``1(MassTransit.MessageHandler{``0})">
            <summary>
            Configure a handler called when the specified response type is received. Receiving
            a response completes the request and either completes or fails the awaiting task
            </summary>
            <typeparam name="T">The response type</typeparam>
            <param name="handler">The reponse handler</param>
            <returns>The response task</returns>
        </member>
        <member name="M:MassTransit.RequestContext.Handle``1">
            <summary>
            Configure a handler called when the specified response type is received. Receiving
            a response completes the request and either completes or fails the awaiting task
            </summary>
            <typeparam name="T">The response type</typeparam>
            <returns>The response task</returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``1(MassTransit.IBus,System.Uri,``0,System.Action{MassTransit.RequestContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a request from the bus to the endpoint, establishing response handlers
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <param name="bus">The bus instance</param>
            <param name="address">The service endpoint address</param>
            <param name="message">The request message</param>
            <param name="callback">A callback to configure the request and response handlers</param>
            <param name="cancellationToken">Can be used to cancel the request</param>
            <returns>An awaitable task that completes once the request is sent</returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``1(MassTransit.IBus,MassTransit.ISendEndpoint,``0,System.Action{MassTransit.RequestContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a request from the bus to the endpoint, establishing response handlers
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <param name="bus">The bus instance</param>
            <param name="sendEndpoint">The service endpoint</param>
            <param name="message">The request message</param>
            <param name="callback">A callback to configure the request and response handlers</param>
            <param name="cancellationToken">Can be used to cancel the request</param>
            <returns>An awaitable task that completes once the request is sent</returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.PublishRequest``1(MassTransit.IBus,``0,System.Action{MassTransit.RequestContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a request from the bus, establishing response handlers. Using Request with an address is highly
            recommended, but this was requested by several users.
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <param name="bus">The bus instance</param>
            <param name="message">The request message</param>
            <param name="callback">A callback to configure the request and response handlers</param>
            <param name="cancellationToken">Can be used to cancel the request</param>
            <returns>An awaitable task that completes once the request is sent</returns>
        </member>
        <member name="P:MassTransit.Retry.None">
            <summary>
            Create a policy that does not retry any messages
            </summary>
        </member>
        <member name="M:MassTransit.Retry.Immediate(System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Immediate(MassTransit.Policies.IPolicyExceptionFilter,System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="filter"></param>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(MassTransit.Policies.IPolicyExceptionFilter,System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="filter"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(MassTransit.Policies.IPolicyExceptionFilter,System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="filter"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(System.Int32,System.Int32)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(MassTransit.Policies.IPolicyExceptionFilter,System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="filter"></param>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy that never gives up
            intervals
            </summary>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(MassTransit.Policies.IPolicyExceptionFilter,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="filter"></param>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Incremental(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Incremental(MassTransit.Policies.IPolicyExceptionFilter,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="filter"></param>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except(System.Type[])">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``1">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``2">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``3">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected(System.Type[])">
            <summary>
            Retry only the exception types specified
            </summary>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``1">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``2">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``3">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.All">
            <summary>
            Retry all exceptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Filter``1(System.Func{``0,System.Boolean})">
            <summary>
            Filter an exception type
            </summary>
            <typeparam name="T">The exception type</typeparam>
            <param name="filter">The filter expression</param>
            <returns>True if the exception should be retried, otherwise false</returns>
        </member>
        <member name="M:MassTransit.RetryLaterExtensions.Redeliver``1(MassTransit.ConsumeContext{``0},System.TimeSpan)">
            <summary>
            Redeliver uses the message scheduler to deliver the message to the queue at a future
            time. The delivery count is incremented. A message scheduler must be configured on the
            bus for redelivery to be enabled.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context of the message</param>
            <param name="delay">The delay before the message is delivered. It may take longer to receive the message if the queue is not empty.</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.SagaConsumeContext`2">
            <summary>
            Consume context including the saga instance consuming the message
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.SagaConsumeContext`1">
            <summary>
            Consume context including the saga instance consuming the message. Note
            this does not expose the message type, for filters that do not care about message type.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="P:MassTransit.SagaConsumeContext`1.Saga">
            <summary>
            The saga instance for the current consume operation
            </summary>
        </member>
        <member name="M:MassTransit.SagaConsumeContext`1.SetCompleted">
            <summary>
            Mark the saga instance as completed, which may remove it from the repository or archive it, etc.
            Once completed, a saga instance should never again be visible, even if the same CorrelationId is
            specified.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.SagaConsumeContext`1.IsCompleted">
            <summary>
            True if the saga has been completed, signaling that the repository may remove it.
            </summary>
        </member>
        <member name="M:MassTransit.SagaExtensions.Saga``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.Saga.ISagaRepository{``0},System.Action{MassTransit.Saga.SubscriptionConfigurators.ISagaConfigurator{``0}})">
            <summary>
            Configure a saga subscription
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="sagaRepository"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaExtensions.ConnectSaga``1(MassTransit.IBus,MassTransit.Saga.ISagaRepository{``0},MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.SagaConsumeContext{``0}}[])">
            <summary>
            Connects the saga to the bus
            </summary>
            <typeparam name="T">The saga type</typeparam>
            <param name="bus">The bus to which the saga is to be connected</param>
            <param name="sagaRepository">The saga repository</param>
            <param name="pipeSpecifications"></param>
        </member>
        <member name="M:MassTransit.SagaPipeConfiguratorExtensions.Filter``2(MassTransit.IPipeConfigurator{MassTransit.SagaConsumeContext{``0,``1}},MassTransit.Pipeline.IFilter{MassTransit.SagaConsumeContext{``0}})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The already built pipe</param>
        </member>
        <member name="M:MassTransit.Saga.Connectors.SagaMessageConnector`2.ConfigureSagaPipe(MassTransit.IPipeConfigurator{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Configure the saga pipe to which the saga instance is sent
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.Saga.Connectors.SagaMessageConnector`2.ConfigureMessagePipe(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{`1}},MassTransit.Saga.ISagaRepository{`0},MassTransit.Pipeline.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Configure the message pipe that is prior to the saga repository
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="repository"></param>
            <param name="sagaPipe"></param>
        </member>
        <member name="T:MassTransit.Saga.Connectors.CorrelatedSagaMessageConnector`2">
            <summary>
            Connects a message that has an exact CorrelationId to the saga instance
            to the saga repository.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Connectors.SagaConnectorCache`1">
            <summary>
            Caches the saga connectors for the saga
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.ConstructorSagaInstanceFactory`1">
            <summary>
            Creates a saga instance using the constructor, via a compiled expression. This class
            is built asynchronously and hot-wrapped to replace the basic Activator style.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.DefaultSagaFactory`2">
            <summary>
            Creates a saga instance using the default factory method
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.ExpressionSagaQueryFactory`2">
            <summary>
            Creates a saga query using the specified filter expression
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.FactoryMethodSagaFactory`2">
            <summary>
            Creates a saga instance using the default factory method
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.ISagaRepositoryContext`2">
            <summary>
            Policy that is applied
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepositoryContext`2.Save(MassTransit.SagaConsumeContext{`0,`1})">
            <summary>
            Save the saga instance, updating and changes in the saga state
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepositoryContext`2.Complete(MassTransit.SagaConsumeContext{`0,`1})">
            <summary>
            Mark the saga instance as complete, which may remove it from the repository or archive it, etc.
            Once completed, a saga instance should never again be visible, even if the same CorrelationId is
            specified.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaCompletionPolicy`1">
            <summary>
            Policy that is applied
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.ISagaFactory`2">
            <summary>
            Creates a saga instance when an existing saga instance is missing
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaFactory`2.Create(MassTransit.ConsumeContext{`1})">
            <summary>
            Create a new saga instance using the supplied consume context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaFactory`2.Send(MassTransit.ConsumeContext{`1},MassTransit.Pipeline.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Send the context through the factory, with the proper decorations
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.PreInsertInstance(MassTransit.ConsumeContext{`1},`0@)">
            <summary>
            If true, the instance returned should be used to try and insert as a new saga instance, ignoring any failures
            </summary>
            <param name="context"></param>
            <param name="instance"></param>
            <returns>True if the instance should be inserted before invoking the message logic</returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.Existing(MassTransit.SagaConsumeContext{`0,`1},MassTransit.Pipeline.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            The method invoked when an existing saga instance is present
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.Missing(MassTransit.ConsumeContext{`1},MassTransit.Pipeline.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Invoked when there is not an existing saga instance available
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaQuery`1">
            <summary>
            A saga query is used when a LINQ expression is accepted to query
            the saga repository storage to get zero or more saga instances
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.Saga.ISagaQuery`1.FilterExpression">
            <summary>
            The query expression that returns true if the saga
            matches the query.
            </summary>
        </member>
        <member name="M:MassTransit.Saga.ISagaQuery`1.GetFilter">
            <summary>
            Compiles a function that can be used to programatically
            compare a saga instance to the filter expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaQueryFactory`2">
            <summary>
            Used to create a saga query from the message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaQueryFactory`2.CreateQuery(MassTransit.ConsumeContext{`1})">
            <summary>
            Creates a saga query from the specified message context
            </summary>
            <param name="context">The message context</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.CorrelationExpressionToSagaIdVisitor`2">
            <summary>
            Determines if a message property is compared to the CorrelationId of the saga and if so
            returns an expression that can be used to return that id
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.SagaFactoryMethod`2">
            <summary>
            Used to create the saga instance
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="context">The message consume context</param>
            <returns>A newly created saga instance</returns>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.CorrelationIdMessageFilter`1">
            <summary>
            Extracts the CorrelationId from the message where there is a one-to-one correlation
            identifier in the message (such as CorrelationId) and sets it in the header for use
            by the saga repository.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.QuerySagaFilter`2">
            <summary>
            Creates a send a query to the saga repository using the query factory and saga policy provided.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.InitiatedBySagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.ISagaMessageFilter`2">
            <summary>
            Adapts a consumer to consume the message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.ObservesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.OrchestratesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.CorrelatedSagaFilter`2">
            <summary>
            Sends the message through the repository using the specified saga policy.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.SagaSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Pipes.SagaMergePipe`2">
            <summary>
            Merges the out-of-band message back into the pipe
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.PropertySagaInstanceFactory`1">
            <summary>
            Creates a saga instance using the constructor, via a compiled expression. This class
            is built asynchronously and hot-wrapped to replace the basic Activator style.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Policies.AnyExistingSagaPolicy`2">
            <summary>
            Sends the message to any existing saga instances, failing silently if no saga instances are found.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Policies.NewSagaPolicy`2">
            <summary>
            Accepts a message to a saga that does not already exist, throwing an exception if an existing
            saga instance is specified.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Policies.NewOrExistingSagaPolicy`2">
            <summary>
            Creates a new or uses an existing saga instance
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Saga.SagaMetadataCache`1.GenerateFactoryMethodAsynchronously">
            <summary>
            Creates a task to generate a compiled saga factory method that is faster than the 
            regular Activator, but doing this asynchronously ensures we don't slow down startup
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaMetadataCache`1.GeneratePropertyFactoryMethodAsynchronously">
            <summary>
            Creates a task to generate a compiled saga factory method that is faster than the 
            regular Activator, but doing this asynchronously ensures we don't slow down startup
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.SagaQueryConsumeContext`2">
            <summary>
            Used to pass a query to the saga repository.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.Saga.SagaQueryConsumeContext`2.Query">
            <summary>
            The saga query to find saga instances
            </summary>
        </member>
        <member name="T:MassTransit.Saga.SagaQueryConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.SubscriptionConfigurators.ISagaConfigurator`1.ConfigureMessage``1(System.Action{MassTransit.Saga.SubscriptionConfigurators.ISagaMessageConfigurator{``0}})">
            <summary>
            Configure a message type for the consumer, such as adding middleware to the pipeline for
            the message type.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="T:MassTransit.Saga.ISagaRepository`1">
            <summary>
            A saga repository is used by the service bus to dispatch messages to sagas
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepository`1.Send``1(MassTransit.ConsumeContext{``0},MassTransit.Saga.ISagaPolicy{`0,``0},MassTransit.Pipeline.IPipe{MassTransit.SagaConsumeContext{`0,``0}})">
            <summary>
            Send the message to the saga repository where the context.CorrelationId has the CorrelationId
            of the saga instance.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="policy">The saga policy for the message</param>
            <param name="next">The saga consume pipe</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepository`1.SendQuery``1(MassTransit.Saga.SagaQueryConsumeContext{`0,``0},MassTransit.Saga.ISagaPolicy{`0,``0},MassTransit.Pipeline.IPipe{MassTransit.SagaConsumeContext{`0,``0}})">
            <summary>
            Send the message to the saga repository where the query is used to find matching saga instances,
            which are invoked concurrently.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The saga query consume context</param>
            <param name="policy">The saga policy for the message</param>
            <param name="next">The saga consume pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISaga">
            <summary>
            Interface that specifies a class is usable as a saga instance, including
            the ability to get and set the CorrelationId on the saga instance.
            </summary>
        </member>
        <member name="P:MassTransit.Saga.ISaga.CorrelationId">
            <summary>
            Identifies the saga instance uniquely, and is the primary correlation
            for the instance. While the setter is not typically called, it is there
            to support persistence consistently across implementations.
            </summary>
        </member>
        <member name="T:MassTransit.Saga.Orchestrates`1">
            <summary>
            Specifies that a class implementing ISaga consumes TMessage as part of the saga
            </summary>
            <typeparam name="TMessage">The type of message to consume</typeparam>
        </member>
        <member name="T:MassTransit.Saga.InitiatedBy`1">
            <summary>
            Specifies that the message type TMessage starts a new saga. 
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.InMemorySagaRepository`1.Add(`0,System.Threading.CancellationToken)">
            <summary>
            Add an instance to the saga repository
            </summary>
            <param name="newSaga"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.InMemorySagaRepository`1.Remove(`0,System.Threading.CancellationToken)">
            <summary>
            Remove an instance from the saga repository
            </summary>
            <param name="saga"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.InMemorySagaRepository`1.AddWithinLock(`0)">
            <summary>
            Adds the saga within an existing lock
            </summary>
            <param name="newSaga"></param>
        </member>
        <member name="T:MassTransit.Saga.InMemorySagaRepository`1.MissingPipe`1">
            <summary>
            Once the message pipe has processed the saga instance, add it to the saga repository
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ScheduleMessageExtensions">
            <summary>
            Extensions for scheduling publish/send message 
            </summary>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,``0)">
            <summary>
            Sends a ScheduleMessage command to the endpoint, using the specified arguments
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="endpoint">The endpoint of the message scheduling service</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext{MassTransit.Scheduling.ScheduleMessage{``0}}})">
            <summary>
            Sends a ScheduleMessage command to the endpoint, using the specified arguments
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="endpoint">The endpoint of the message scheduling service</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="sendPipe"></param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.CancelScheduledSend``1(MassTransit.ISendEndpoint,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.CancelScheduledSend(MassTransit.ISendEndpoint,System.Guid)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0,MassTransit.Pipeline.IPipe{MassTransit.PublishContext{MassTransit.Scheduling.ScheduleMessage{``0}}})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="publishEndpoint">The bus from which the scheduled message command should be published</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IBus,System.DateTime,``0,MassTransit.Pipeline.IPipe{MassTransit.PublishContext{MassTransit.Scheduling.ScheduleMessage{``0}}})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="bus">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
             /// <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.ConsumeContext,System.DateTime,``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="context">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
             /// <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="context">The bus from which the scheduled message command should be published and delivered</param>
            <param name="destinationAddress"></param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
             /// <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.CancelScheduledMessage``1(MassTransit.IPublishEndpoint,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="bus"></param>
            <param name="message"> </param>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.CancelScheduledMessage(MassTransit.IPublishEndpoint,System.Guid)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="bus"></param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.ScheduleRecurringMessage``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.Pipeline.IPipe{MassTransit.PublishContext{MassTransit.Scheduling.ScheduleRecurringMessage{``0}}})">
            <summary>
            Schedules a recurring message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="publishEndpoint">The bus from which the scheduled message command should be published</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The recurring schedule instance</param>
            <param name="message">The message to send</param>
            <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.ScheduleRecurringMessage``1(MassTransit.IBus,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.Pipeline.IPipe{MassTransit.PublishContext{MassTransit.Scheduling.ScheduleRecurringMessage{``0}}})">
            <summary>
                Schedules a message to be sent to the bus using a Publish, which should only be used when
                the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="bus">The bus from which the scheduled message command should be published</param>
            <param name="schedule">An instance of IRecurringSchedule that defines this schedule</param>
            <param name="message">The message to send</param>
            <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.CancelScheduledRecurringMessage``1(MassTransit.IPublishEndpoint,MassTransit.Scheduling.ScheduledRecurringMessage{``0})">
            <summary>
                Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="bus"></param>
            <param name="message"> </param>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.CancelScheduledRecurringMessage(MassTransit.IPublishEndpoint,MassTransit.Scheduling.RecurringSchedule)">
            <summary>
                Cancel a scheduled recurring message using the id and group of the schedule class.
            </summary>
            <param name="bus"></param>
            <param name="scheduleId"></param>
            <param name="scheduleGroup"></param>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.CancelScheduledRecurringMessage(MassTransit.IPublishEndpoint,System.String,System.String)">
            <summary>
                Cancel a scheduled recurring message using the id and group of the schedule.
            </summary>
            <param name="bus"></param>
            <param name="scheduleId"></param>
            <param name="scheduleGroup"></param>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.TokenId">
            <summary>
            The token of the scheduled message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledRecurringMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledRecurringMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="T:MassTransit.Scheduling.MissedEventPolicy">
            <summary>
            If the scheduler is offline and comes back online, the policy determines how
            a missed scheduled message is handled.
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Default">
            <summary>
            use the default handling of the scheduler
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Skip">
            <summary>
            Skip the event, waiting for the next scheduled interval
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Send">
            <summary>
            Send the message immediately and then continue the schedule as planned
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.TimeZoneId">
            <summary>
            The timezone of the schedule
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.StartTime">
            <summary>
            The time the recurring schedule is enabled
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.EndTime">
            <summary>
            The time the recurring schedule is disabled
            If null then the job is repeated forever
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.ScheduleId">
            <summary>
            A unique name that idenifies this schedule.
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.ScheduleGroup">
            <summary>
            A
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.CronExpression">
            <summary>
            The Cron Schedule Expression in Cron Syntax
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.ScheduledTime">
            <summary>
            The time at which the message should be published, should be in UTC
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.PayloadType">
            <summary>
            The message types implemented by the message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.Destination">
            <summary>
            The destination where the message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage`1.Payload">
            <summary>
            The message to be published 
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.PayloadType">
            <summary>
            The message types implemented by the message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.Destination">
            <summary>
            The destination where the message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage`1.Payload">
            <summary>
            The message to be published 
            </summary>
        </member>
        <member name="T:MassTransit.SendContext`1">
            <summary>
            The SendContext is used to tweak the send to the endpoint
            </summary>
            <typeparam name="T">The message type being sent</typeparam>
        </member>
        <member name="P:MassTransit.SendContext`1.Message">
            <summary>
            The message being sent
            </summary>
        </member>
        <member name="T:MassTransit.SendContext">
            <summary>
            Unlike the old world, the send context is returned from the endpoint and used to configure the message sending.
            That way the message is captured by the endpoint and then any configuration is done at the higher level.
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Durable">
            <summary>
            True if the message should be persisted to disk to survive a broker restart
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Serializer">
            <summary>
            The serializer to use when serializing the message to the transport
            </summary>
        </member>
        <member name="M:MassTransit.SendContext.CreateProxy``1(``0)">
            <summary>
            Create a send context proxy with the new message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,``0,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,System.Object,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetHostHeaders(MassTransit.SendContext)">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="sendContext"></param>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object)">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type)">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="values"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="endpointAddress"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.ReceiveFault">
            <summary>
            Published when a message fails to deserialize at the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveFault.ContentType">
            <summary>
            The specified content type of the message by the transport
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.ConsumeSendEndpoint">
            <summary>
            Intercepts the ISendEndpoint and makes it part of the current consume context
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.ICryptoStreamProvider">
            <summary>
            Provides a crypto stream for the purpose of encrypting or decrypting 
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.ICryptoStreamProvider.GetEncryptStream(System.IO.Stream,System.String,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="keyId">The encryption key identifier</param>
            <param name="streamMode"></param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.Serialization.ICryptoStreamProvider.GetDecryptStream(System.IO.Stream,System.String,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="stream">The input stream of the encrypted message</param>
            <param name="keyId">The encryption key identifier</param>
            <param name="streamMode"></param>
            <returns>A stream for deserializing the encrypted message</returns>
        </member>
        <member name="T:MassTransit.Serialization.ISymmetricKeyProvider">
            <summary>
            Returns the symmetric key used to encrypt or decrypt messages
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.ISymmetricKeyProvider.TryGetKey(System.String,MassTransit.Serialization.SymmetricKey@)">
            <summary>
            Return the specified key, if found. When using Symmetric key encryption, the default key is used
            unless the transport header contains a specific key identifier for the message.
            </summary>
            <param name="id">The key id</param>
            <param name="key">The symmetric key</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.JsonConsumeContext.ConvertIdToGuid(System.String)">
            <summary>
                Converts a string identifier to a Guid, if it's actually a Guid. Can throw a FormatException
                if things are not right
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.JsonConsumeContext.ConvertToUri(System.String)">
            <summary>
                Convert the string to a Uri, or return null if it's empty
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Serialization.StaticConsumeContext">
            <summary>
            A static consume context from the Binary serializer
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.BinaryMessageSerializer">
            <summary>
            The binary message serializer used the .NET BinaryFormatter to serialize
            message content. 
            </summary>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.IConsumerFactory{``0},System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Connect a consumer to the receiving endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactory"></param>
            <param name="configure">Optional, configure the consumer</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.IBus,MassTransit.IConsumerFactory{``0},MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Connect a consumer to the bus instance's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="bus"></param>
            <param name="consumerFactory"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Subscribes a consumer with a default constructor to the endpoint
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.IBus,MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Subscribe a consumer with a default constructor to the bus's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="bus"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.Func{``0},System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactoryMethod"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.IBus,System.Func{``0})">
            <summary>
            Subscribe a consumer with a consumer factor method to the bus's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="bus"></param>
            <param name="consumerFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer(MassTransit.IReceiveEndpointConfigurator,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Connect a consumer with a consumer type and object factory method for the consumer (used by containers mostly)
            </summary>
            <param name="configurator"></param>
            <param name="consumerType"></param>
            <param name="consumerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer(MassTransit.IBus,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Connect a consumer with a consumer type and object factory method for the consumer
            </summary>
            <param name="bus"></param>
            <param name="consumerType"></param>
            <param name="objectFactory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.HandlerExtensions.Handler``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.MessageHandler{``0},System.Action{MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0}})">
            <summary>
            Adds a handler to the receive endpoint with additional configuration specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="handler"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.ConnectHandler``1(MassTransit.IBus,MassTransit.MessageHandler{``0},MassTransit.PipeConfigurators.IPipeSpecification{MassTransit.ConsumeContext{``0}}[])">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="bus"></param>
            <param name="handler">The callback to invoke when messages of the specified type arrive on the service bus</param>
            <param name="specifications"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.ConnectRequestHandler``1(MassTransit.IBus,System.Guid,MassTransit.MessageHandler{``0})">
            <summary>
            Subscribe a request handler to the bus's endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="requestId"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.InstanceExtensions">
            <summary>
            Extensions for subscribing object instances.
            </summary>
        </member>
        <member name="M:MassTransit.InstanceExtensions.Instance(MassTransit.IReceiveEndpointConfigurator,System.Object)">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">Service Bus Service Configurator 
            - the item that is passed as a parameter to
            the action that is calling the configurator.</param>
            <param name="instance">The instance to subscribe.</param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.ConnectInstance(MassTransit.IBus,System.Object)">
            <summary>
            Connects any consumers for the object to the message dispatcher
            </summary>
            <param name="bus">The service bus to configure</param>
            <param name="instance"></param>
            <returns>The unsubscribe action that can be called to unsubscribe the instance
            passed as an argument.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.ConnectInstance``1(MassTransit.IBus,``0)">
            <summary>
            Connects any consumers for the object to the message dispatcher
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <param name="bus">The service bus instance to call this method on.</param>
            <param name="instance">The instance to subscribe.</param>
            <returns>The unsubscribe action that can be called to unsubscribe the instance
            passed as an argument.</returns>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseJsonSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the JSON serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.ConfigureJsonSerializer(MassTransit.IBusFactoryConfigurator,System.Func{Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Configure the serialization settings used to create the message serializer
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.ConfigureJsonDeserializer(MassTransit.IBusFactoryConfigurator,System.Func{Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Configure the serialization settings used to create the message deserializer
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseBsonSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the BSON message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseXmlSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the XML message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseBinarySerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize message using the .NET binary formatter (also adds support for the binary deserializer)
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.SupportBinaryMessageDeserializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Add support for the binary message deserializer to the bus. This serializer is not supported
            by default.
            </summary>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Fault">
            <summary>
            Published (or sent, if part of a request/response conversation) when a fault occurs during message
            processing
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultId">
            <summary>
            Identifies the fault that was generated
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultedMessageId">
            <summary>
            The messageId that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Timestamp">
            <summary>
            When the fault was produced
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Exceptions">
            <summary>
            The exception information that occurred
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Host">
            <summary>
            The host information was the fault occurred
            </summary>
        </member>
        <member name="T:MassTransit.Fault`1">
            <summary>
            A faulted message, published when a message consumer fails to process the message
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Fault`1.Message">
            <summary>
            The message that faulted
            </summary>
        </member>
        <member name="T:MassTransit.IMessageConsumer`1">
            <summary>
                Defines a class as a consumer of messages which implement T, either as a class or interface
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IMessageConsumer`1.Consume(`0)">
            <summary>
                Called by the framework when a message is available to be consumed. This
                is called by a framework thread, so care should be used when accessing
                any shared objects.
            </summary>
            <param name="message">The message to consume.</param>
        </member>
        <member name="T:MassTransit.IConsumerFactory`1">
            <summary>
            Maps an instance of a consumer to one or more Consume methods for the specified message type
            
            The whole purpose for this interface is to allow the creator of the consumer to manage the lifecycle
            of the consumer, along with anything else that needs to be managed by the factory, container, etc.
            </summary>
            <typeparam name="TConsumer">The Consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Testing.IBusTestScenario">
            <summary>
            A bus test scenario with a single bus with no receiving endpoints
            </summary>
        </member>
        <member name="P:MassTransit.Testing.IBusTestScenario.Bus">
            <summary>
            The bus associated with the test
            </summary>
        </member>
        <member name="P:MassTransit.Testing.IBusTestScenario.SubjectSendEndpoint">
            <summary>
            Gets the endpoint that is the receiving endpoint with the test subject
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Configurators.TestConfiguratorResult.Disposition">
            <summary>
            The disposition of the result, any Failure items will prevent
            the configuration from completing.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Configurators.TestConfiguratorResult.Key">
            <summary>
            The key associated with the result (chained if configurators are nested)
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Configurators.TestConfiguratorResult.Message">
            <summary>
            The message associated with the result
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Configurators.TestConfiguratorResult.Value">
            <summary>
            The value associated with the result
            </summary>
        </member>
        <member name="T:MassTransit.Testing.ITestScenario">
            <summary>
            A test scenario that allows the tester to
            get hold of what messages were published, skipped, sent and received.
            Inherits IDisposable.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITestScenario.Published">
            <summary>
            The list of published messages is contained within this instance.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITestScenario.Received">
            <summary>
            The list of received messages is contained within this instance.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITestScenario.Sent">
            <summary>
            The list of send messages is contained within this instance.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITestScenario.Skipped">
            <summary>
            The list of skipped messages is contained within this instance.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITestScenario.CancellationToken">
            <summary>
            The cancellation token for the test, use for any awaited items that are part of the text execution.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITestScenario.Timeout">
            <summary>
            The timeout value to be used when a cancellation token is not allowed for the test timeout.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.ITestScenario.Cancel">
            <summary>
            Cancel the test execution, if possible
            </summary>
        </member>
        <member name="M:MassTransit.Testing.ScenarioBuilders.IBusTestScenarioBuilder.ConfigureBus(System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure any bus-specific items as part of building the test scenario
            </summary>
            <param name="configureCallback"></param>
        </member>
        <member name="M:MassTransit.Testing.ScenarioBuilders.IBusTestScenarioBuilder.ConfigureReceiveEndpoint(System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            COnfigure the receive endpoint
            </summary>
            <param name="configureCallback"></param>
        </member>
        <member name="T:MassTransit.Testing.ScenarioBuilders.BusTestScenarioBuilder">
            <summary>
            Implementation for the test scenario, but abstract for others to customize it. Sets some defaults in the c'tor, which you
            can override with the <see cref="M:MassTransit.Testing.ScenarioBuilders.BusTestScenarioBuilder.ConfigureBus(System.Action{MassTransit.IInMemoryBusFactoryConfigurator})"/> and <see cref="M:MassTransit.Testing.ScenarioBuilders.BusTestScenarioBuilder.ConfigureReceiveEndpoint(System.Action{MassTransit.IReceiveEndpointConfigurator})"/> methods.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.ScenarioBuilders.BusTestScenarioBuilder.#ctor">
            <summary>
            c'tor
            </summary>
        </member>
        <member name="T:MassTransit.Testing.ScenarioBuilders.ITestScenarioBuilder`1">
            <summary>
            Builds a test scenario based on the inputs
            </summary>
            <typeparam name="TScenario">The test scenario type</typeparam>
        </member>
        <member name="M:MassTransit.Testing.ScenarioBuilders.ITestScenarioBuilder`1.Build">
            <summary>
            Builds the test scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Testing.ScenarioBuilders.ITestScenarioBuilder`1.Timeout">
            <summary>
            The test timeout
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Scenarios.BusTestScenario">
            <summary>
            A bus test scenario includes a bus only, with no receiving endpoints
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Subjects.IConsumerTestSubject`1.Received">
            <summary>
            The messages that were received by the handler
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Subjects.SagaTestSubject`1.Received">
            <summary>
            The messages that were received by the handler
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Subjects.SagaTestSubject`1.Created">
            <summary>
            The sagas that were created during the test
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Subjects.IHandlerTestSubject`1.Received">
            <summary>
            The messages that were received by the handler
            </summary>
        </member>
        <member name="T:MassTransit.Testing.TestDecorators.TestSendObserver">
            <summary>
            Observes sent messages for test fixtures
            </summary>
        </member>
        <member name="T:MassTransit.Testing.TestFactory">
            <summary>
            Factory for testing message handlers, buses and messages - received, skipped, sent and published. The builders used
            with the <see cref="T:MassTransit.Testing.TestInstanceConfigurators.ITestConfigurator`1"/>, defaults to the loopback bus scenario. Use the extension methods in
            <see cref="!:BusTestScenarioExtensions"/> to use alternative scenario builders. A builder is something that ties some component
            together.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.TestFactory.ForHandler``1">
            <summary>
            Creates a new <see cref="T:MassTransit.Testing.Factories.HandlerTestFactory`2"/> for the passed message (generic parameter).
            </summary>
            <typeparam name="TMessage">The type of the message to create a test for.</typeparam>
            <returns>A 'configurator' - a handler test factory.</returns>
        </member>
        <member name="P:MassTransit.Testing.ITest.Received">
            <summary>
            Messages that were received by any endpoint during the execution of the test
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITest.Sent">
            <summary>
            Messages that were send by any endpoint during the execution of the test
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITest.Skipped">
            <summary>
            Messages that were not received by any handler, consumer, or instance during the execution of the test
            </summary>
        </member>
        <member name="P:MassTransit.Testing.ITest.Published">
            <summary>
            Messages that were published by an bus (does not mean they were actually sent, just published)
            </summary>
        </member>
        <member name="M:MassTransit.Testing.ITest.Execute">
            <summary>
            Execute the test actions
            </summary>
        </member>
        <member name="T:MassTransit.Transformation.Contexts.SendTransformContext`1">
            <summary>
            Sits in front of the consume context and allows the inbound message to be 
            transformed.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.Contexts.ConsumeTransformContext`1">
            <summary>
            Sits in front of the consume context and allows the inbound message to be 
            transformed.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator`1.Get``1">
            <summary>
            Get a transform specification using the default constructor
            </summary>
            <typeparam name="T">The transform specification type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator`1.Get``1(System.Func{``0})">
            <summary>
            Get a transform specification using the factory method
            </summary>
            <typeparam name="T">The transform specification type</typeparam>
            <param name="transformFactory">The transform specification factory method</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transformation.IPropertyTransform`1">
            <summary>
            A property transform that is not dependent upon the input type
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.IPropertyTransform`2">
            <summary>
            A property transform that uses the input type
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.PropertyTransforms.InputPropertyTransform`2">
            <summary>
            A transform that writes to the input model, instead of the result model
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.PropertyTransforms.ResultPropertyTransform`3">
            <summary>
            A property transform that writes to the result model
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.SourceContext`2">
            <summary>
            Provides the context for a property transform
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.SourceContext`2.HasValue">
            <summary>
            True if the value is present from the source
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.SourceContext`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`1.Set(System.String,MassTransit.Transformation.IPropertyTransform{`0,`0})">
            <summary>
            Add a property transform that transforms the input instead of the result
            </summary>
            <param name="propertyName"></param>
            <param name="propertyTransform"></param>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`1.DefaultAll">
            <summary>
            Set all properties on the resulting object to the default value
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`1.RemoveAll">
            <summary>
            Remove all existing transforms, which will do a 1:1 copy of the source to the target
            without any modifications
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`2.Set(System.String,MassTransit.Transformation.IPropertyTransform{`0,`1})">
            <summary>
            Add a property transform for the specified property. If a transform for the property
            already exists, an exception is thrown.
            </summary>
            <param name="propertyName">The property name</param>
            <param name="propertyTransform">The property transform</param>
        </member>
        <member name="T:MassTransit.Transformation.TransformContext">
            <summary>
            Context used by a message transform
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.CancellationToken">
            <summary>
            Used to cancel the execution of the context
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.MessageId">
            <summary>
            The messageId assigned to the message when it was initially Sent. This is different
            than the transport MessageId, which is only for the Transport.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.RequestId">
            <summary>
            If the message is a request, or related to a request, such as a response or a fault,
            this contains the requestId.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.CorrelationId">
            <summary>
            If the message implements the CorrelatedBy(Guid) interface, this field should be 
            populated by default to match that value. It can, of course, be overwritten with
            something else.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.ConversationId">
            <summary>
            The conversationId of the message, which is copied and carried throughout the message
            flow by the infrastructure.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.InitiatorId">
            <summary>
            If this message was produced within the context of a previous message, the CorrelationId
            of the message is contained in this property. If the message was produced from a saga
            instance, the CorrelationId of the saga is used.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.SourceAddress">
            <summary>
            The address of the message producer that sent the message
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.DestinationAddress">
            <summary>
            The destination address of the message
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.Headers">
            <summary>
            Additional application-specific headers that are added to the message by the application
            or by features within MassTransit, such as when a message is moved to an error queue.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.Host">
            <summary>
            The host information of the message producer. This may not be present if the message was sent
            from an earlier version of MassTransit.
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformContext.HasPayloadType(System.Type)">
            <summary>
            Checks if a payload is present in the context
            </summary>
            <param name="contextType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transformation.TransformContext.TryGetPayload``1(``0@)">
            <summary>
            Retrieves a payload from the pipe context
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transformation.TransformContext.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Returns an existing payload or creates the payload using the factory method provided
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="payloadFactory">The payload factory is the payload is not present</param>
            <returns>The payload</returns>
        </member>
        <member name="T:MassTransit.Transformation.TransformContext`1">
            <summary>
            Context used by a message transform
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext`1.Input">
            <summary>
            The input message to be transformed
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext`1.HasInput">
            <summary>
            True if the input is present, otherwise false
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformContextExtensions.Return``1(MassTransit.Transformation.TransformContext,``0,System.Boolean)">
            <summary>
            Returns the original message as a transform result
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="isNewValue"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transformation.TransformResult`1">
            <summary>
            The result of a message transformation
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.TransformResult`1.Value">
            <summary>
            The transformed message
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformResult`1.IsNewValue">
            <summary>
            True if the transform has returned a new value, otherwise false. Some transforms
            actually apply to the original message, versus creating a new message leaving the
            original message unmodified.
            </summary>
        </member>
        <member name="T:MassTransit.Transformation.Transforms.ResultTransform`2">
            <summary>
            Transforms the message by creating a new message and copying/setting/ignoring the original properties
            </summary>
            <typeparam name="TResult">The message type</typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.MonitorJob">
            <summary>
            Send to the monitor queue so that any running node can monitor the queue of a worker node
            and handle the job if the original node fails to read the queue.
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.MonitorJob.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.MonitorJob.JobHostAddress">
            <summary>
            The address of the job host
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.MonitorJob.MessageId">
            <summary>
            The message identifier of the matching SuperviseJob message
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.SuperviseJob">
            <summary>
            Supervise an active job
            Sent to the node where the job is executing so that it can check the status
            of the job. Sent at an interval until the job is completed.
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob.LastStatusTimestamp">
            <summary>
            The time of the last job status check
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob.LastStatus">
            <summary>
            The previous job status
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobCompleted">
            <summary>
            Published when a job completes
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted.Timestamp">
            <summary>
            The time the job completed
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobCompleted`1">
            <summary>
            Published when a job completes with a result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted`1.Result">
            <summary>
            The result of the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobFaulted">
            <summary>
            Published when a job faults
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted.Timestamp">
            <summary>
            The time the job faulted
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted.Exceptions">
            <summary>
            The exceptions that were thrown by the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobStarted">
            <summary>
            Published when a job is started
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.Timestamp">
            <summary>
            The time the job was started
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobStatus">
            <summary>
            The status of a job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.SuperviseJobConsumer">
            <summary>
            Consumer that handles the SuperviseJob message to check the status of the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.CreateJobConsumer`1">
            <summary>
            The consumer that creates the job using the turnout host
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle`1.Message">
            <summary>
            The message that initiated the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.JobHandle">
            <summary>
            A JobHandle contains the JobContext, Task, and provides access to the job control
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle.JobId">
            <summary>
            The unique job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle.ElapsedTime">
            <summary>
            The time the job has been active
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle.Status">
            <summary>
            The job's status, derived from the underlying Task status
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.JobHandle.Cancel">
            <summary>
            Cancel the job task
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Turnout.IJobRoster">
            <summary>
            Contains the roster of active jobs for the receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.IJobRoster.Add(System.Guid,MassTransit.Turnout.JobHandle)">
            <summary>
            Add a job to the registry
            </summary>
            <param name="jobId"></param>
            <param name="jobReference"></param>
        </member>
        <member name="M:MassTransit.Turnout.IJobRoster.RemoveJob(System.Guid)">
            <summary>
            Remove the job from the roster
            </summary>
            <param name="jobId"></param>
        </member>
        <member name="M:MassTransit.Turnout.IJobFactory`1.Execute(MassTransit.Turnout.JobContext{`0},MassTransit.Pipeline.IPipe{MassTransit.Turnout.JobContext{`0}})">
            <summary>
            Executes the activity context by passing it to the activity factory, which creates the activity
            and then invokes the next pipe with the combined activity context
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Turnout.IJobFactory`2.Execute(MassTransit.Turnout.JobContext{`0,`1},MassTransit.Pipeline.IPipe{MassTransit.Turnout.JobResultContext{`0,`1}})">
            <summary>
            Execute the job, invoking next with the result of the job once it completed
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Turnout.ITurnoutController">
            <summary>
            A turnout is a lane where buses can pull aside to wait for passengers. In that style, the
            turnout service allows message consumers to run asynchronous tasks and continue once the background job
            is completed.
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.ITurnoutController.CreateJob``1(MassTransit.ConsumeContext{``0},MassTransit.Turnout.IJobFactory{``0})">
            <summary>
            Creates a job and schedules it for execution.
            </summary>
            <typeparam name="T">The message type that is used to initiate the job</typeparam>
            <param name="context">The context of the message being consumed</param>
            <param name="jobFactory">The factory to create the job Task</param>
            <returns>The newly created job's handle</returns>
        </member>
        <member name="T:MassTransit.Turnout.ConsumerJobContext`1">
            <summary>
            A job context created from a consumer's consume context
            </summary>
            <typeparam name="TInput">The input type for the job</typeparam>
        </member>
        <member name="P:MassTransit.Turnout.JobContext.JobId">
            <summary>
            Identifies the job execution
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobContext.ElapsedTime">
            <summary>
            The elapsed time of the job
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobContext`1.Message">
            <summary>
            The message that initiated the job
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.JobContext`2.FromResult(`1)">
            <summary>
            Create a result context from the job context to pass to the next pipe
            </summary>
            <param name="result">The job's result</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Turnout.JobRoster">
            <summary>
            Maintains the jobs for a turnout
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobResultContext`2.Result">
            <summary>
            The result of the job once it has completed
            </summary>
        </member>
        <member name="M:MassTransit.TurnoutConfigurationExtensions.Turnout``1(MassTransit.IInMemoryReceiveEndpointConfigurator,MassTransit.IInMemoryBusFactoryConfigurator,System.Action{MassTransit.Turnout.Configuration.ITurnoutHostConfigurator{``0}})">
            <summary>
            Configures a Turnout on the receive endpoint, which executes a long-running job and supervises the job until it
            completes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator">The receive endpoint configurator</param>
            <param name="busFactoryConfigurator">The bus factory configuration to use a separate endpoint for the control traffic</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.TurnoutConfigurationExtensions.SetJobFactory``1(MassTransit.Turnout.Configuration.ITurnoutHostConfigurator{``0},System.Func{MassTransit.Turnout.JobContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Sets the job factory to the specified delegate
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The turnout configurator</param>
            <param name="jobFactory">A function that returns a Task for the job</param>
        </member>
        <member name="P:MassTransit.TransactionContext.Transaction">
            <summary>
            Returns the current transaction scope, creating a dependent scope if a thread switch
            occurred
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Commit">
            <summary>
            Complete the transaction scope
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Rollback(System.Exception)">
            <summary>
            Rollback the transaction
            </summary>
            <param name="exception">The exception that caused the rollback</param>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(MassTransit.PipeContext)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(MassTransit.PipeContext,System.TimeSpan)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <param name="scopeTimeout">The timespan after which the scope times out and aborts the transaction</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.EndpointLoggerExtensions.LogMoved(System.Uri,System.Uri,System.String,System.String)">
            <summary>
            Log that a message was moved from one endpoint to the destination endpoint address
            </summary>
            <param name="sourceAddress"></param>
            <param name="destinationAddress"></param>
            <param name="messageId"></param>
            <param name="description"> </param>
        </member>
        <member name="M:MassTransit.Transports.EndpointLoggerExtensions.LogReQueued(System.Uri,System.Uri,System.String,System.String)">
            <summary>
            Log that a message was requeued to the transport after an exception occurred
            </summary>
            <param name="sourceAddress"></param>
            <param name="destinationAddress"></param>
            <param name="messageId"></param>
            <param name="description"> </param>
        </member>
        <member name="T:MassTransit.Transports.FanoutSendEndpoint">
            <summary>
            Combines multiple send endpoints into a single send endpoint. Useful when publishing
            requires sending to multiple endpoints.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.HostHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Close the Host, shutting it down for good.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.IBusHost">
            <summary>
            A Bus Host is a transport-neutral reference to a host
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IBusHostControl.Start">
            <summary>
            Starts the Host, which begins the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.IMessageNameFormatter">
            <summary>
            Used to format a message type into a MessageName, which can be used as a valid
            queue name on the transport
            </summary>
        </member>
        <member name="T:MassTransit.Transports.DictionaryHeaderProvider">
            <summary>
            A simple in-memory header collection for use with the in memory transport
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.InMemoryTransport">
            <summary>
            Support in-memory message queue that is not durable, but supports parallel delivery of messages
            based on TPL usage.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.InMemoryTransportCache">
            <summary>
            Caches InMemory transport instances so that they are only created and used once
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IReceiveTransport.Start(MassTransit.Pipeline.IPipe{MassTransit.ReceiveContext})">
            <summary>
            Start receiving on a transport, sending messages to the specified pipe.
            </summary>
            <param name="receivePipe">The receiving pipe</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ISendTransport.Send``1(``0,MassTransit.Pipeline.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Send a message to the transport. The transport creates the OldSendContext, and calls back to
                allow the context to be modified to customize the message delivery.
                The transport specifies the defaults for the message as configured, and then allows the
                caller to modify the send context to include the required settings (durable, mandatory, etc.).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe">The pipe invoked when sending a message, to do extra stuff</param>
            <param name="cancelSend">Cancel the send operation (if possible)</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.Transports.ISendTransport.Move(MassTransit.ReceiveContext,MassTransit.Pipeline.IPipe{MassTransit.SendContext})">
            <summary>
            Move a message from a receive transport to the transport
            </summary>
            <param name="context">The original receive context</param>
            <param name="pipe"></param>
            <returns>A task completed once the message has been sent</returns>
        </member>
        <member name="M:MassTransit.Transports.ISendTransport.Close">
            <summary>
            Close the transport, releasing any resources it may own
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.MessageName">
            <summary>
            Class encapsulating naming strategies for exchanges corresponding
            to message types.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ReceiveEndpoint">
            <summary>
            A receive endpoint is called by the receive transport to push messages to consumers.
            The receive endpoint is where the initial deserialization occurs, as well as any additional
            filters on the receive context. 
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ReceiveEndpointHandle">
            <summary>
            A handle to an active endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the endpoint, releasing any resources associated with the endpoint
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.ReceiveTransportHandle">
            <summary>
            A handle to an active transport
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveTransportHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the transport, releasing any resources associated with the endpoint
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.SendEndpointCache">
            <summary>
            Caches SendEndpoint instances by address (ignoring the query string entirely, case insensitive)
            </summary>
        </member>
        <member name="T:MassTransit.Consumes`1">
            <summary>
                API-oriented class.
            </summary>
            <typeparam name="TMessage">The message type to consume.</typeparam>
        </member>
        <member name="T:MassTransit.Consumes`1.All">
            <summary>
                Declares a Consume method for the message type TMessage which is called
                whenever a a message is received of the specified type.
            </summary>
        </member>
        <member name="T:MassTransit.CorrelatedBy`1">
            <summary>
              Used to identify a message as correlated so that the CorrelationId can be returned
            </summary>
            <typeparam name = "TKey">The type of the CorrelationId used</typeparam>
        </member>
        <member name="P:MassTransit.CorrelatedBy`1.CorrelationId">
            <summary>
              Returns the CorrelationId for the message
            </summary>
        </member>
        <member name="T:MassTransit.Util.Caching.Cached`1">
            <summary>
            A cached value
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:MassTransit.Util.Caching.Cached`1.Value">
            <summary>
            The cached value
            </summary>
        </member>
        <member name="M:MassTransit.Util.Caching.Cached`1.Touch">
            <summary>
            Update the last used time for the cached value
            </summary>
        </member>
        <member name="T:MassTransit.Util.Caching.LazyMemoryCache`2.KeyFormatter">
            <summary>
            Formats a key as a string
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.Caching.LazyMemoryCache`2.PolicyProvider">
            <summary>
            Provides the policy for the cache item
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.Caching.LazyMemoryCache`2.ValueFactory">
            <summary>
            Returns the value for a key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.Caching.LazyMemoryCache`2.ValueRemoved">
            <summary>
            The callback when an item is removed from the cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Util.Caching.LazyMemoryCache`2.ICacheExpirationSelector.Key">
            <summary>
            The key for the cache item
            </summary>
        </member>
        <member name="M:MassTransit.Util.Caching.LazyMemoryCache`2.ICacheExpirationSelector.SlidingWindow(System.TimeSpan)">
            <summary>
            The cache item should expire after being usused for the specified time period
            </summary>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.Caching.LazyMemoryCache`2.ICacheExpirationSelector.Absolute(System.DateTimeOffset)">
            <summary>
            The cache item should expire after a set time period
            </summary>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.Caching.LazyMemoryCache`2.ICacheExpirationSelector.None">
            <summary>
            The cache item should never expire
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.ITaskSupervisorScope">
            <summary>
            A task participant that hosts additional participants
            </summary>
        </member>
        <member name="T:MassTransit.Util.RollingTimer">
            <summary>
            Thread safe timer that allows efficient restarts by rolling the due time further into the future.
            Will roll over once every 43~ days of continuous runtime without a restart.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Start">
            <summary>
            Creates a new timer and starts it.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Restart">
            <summary>
            Restarts the existing timer, creates and starts a new timer if it does not exist.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Stop">
            <summary>
            Stops and disposes the existing timer.
            </summary>
        </member>
        <member name="T:MassTransit.Util.TaskSupervisor">
            <summary>
            An asynchronous signaling component
            </summary>
        </member>
        <member name="T:MassTransit.Util.AsyncObservable`1">
            <summary>
            Supports the asynchronous notification of events to an observer that are maintained in order
            to prevent issues with event ordering or threading.
            </summary>
            <typeparam name="T">The observer type</typeparam>
        </member>
        <member name="P:MassTransit.Util.AsyncObservable`1.Count">
            <summary>
            The number of connections
            </summary>
        </member>
        <member name="M:MassTransit.Util.AsyncObservable`1.Connect(`0)">
            <summary>
            Connect a connectable type
            </summary>
            <param name="observer">The connection to add</param>
            <returns>The connection handle</returns>
        </member>
        <member name="M:MassTransit.Util.AsyncObservable`1.Notify(MassTransit.Util.AsyncObservable{`0}.ObserverNotification)">
            <summary>
            Enumerate the connections invoking the callback for each connection
            </summary>
            <param name="callback">The callback</param>
            <returns>An awaitable Task for the operation</returns>
        </member>
        <member name="T:MassTransit.Util.Connectable`1">
            <summary>
            Maintains a collection of connections of the generic type
            </summary>
            <typeparam name="T">The connectable type</typeparam>
        </member>
        <member name="P:MassTransit.Util.Connectable`1.Count">
            <summary>
            The number of connections
            </summary>
        </member>
        <member name="M:MassTransit.Util.Connectable`1.Connect(`0)">
            <summary>
            Connect a connectable type
            </summary>
            <param name="connection">The connection to add</param>
            <returns>The connection handle</returns>
        </member>
        <member name="M:MassTransit.Util.Connectable`1.ForEachAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Enumerate the connections invoking the callback for each connection
            </summary>
            <param name="callback">The callback</param>
            <returns>An awaitable Task for the operation</returns>
        </member>
        <member name="P:MassTransit.Util.ITaskSupervisor.Ready">
            <summary>
            Completed when the supervisor and subordinates are ready
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITaskSupervisor.Completed">
            <summary>
            Completed when the signal is complete and ready to exit
            </summary>
        </member>
        <member name="M:MassTransit.Util.ITaskSupervisor.CreateParticipant">
            <summary>
            Connects a participant to the signal for observation by the signaler
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.ITaskSupervisor.CreateScope">
            <summary>
            Creates a scope that has it's own participants that can be coordinated
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.IndexedSagaProperty`1">
            <summary>
            For the in-memory saga repository, this maintains an index of saga properties
            for fast searching
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="P:MassTransit.Util.IndexedSagaProperty`1.Item(System.Object)">
            <summary>
            Returns the saga with the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Add(`0)">
            <summary>
            Adds a new saga to the index
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Remove(MassTransit.Util.SagaInstance{`0})">
            <summary>
            Removes a saga from the index
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Returns sagas matching the filter function
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Where(System.Object,System.Func{`0,System.Boolean})">
            <summary>
            Returns sagas matching the filter function where the key also matches
            </summary>
            <param name="key"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Select``1(System.Func{`0,``0})">
            <summary>
            Selects sagas from the index, running the transformation function and returning the output type
            </summary>
            <param name="transformer"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.IndexedSagaProperty`2">
            <summary>
            A dictionary index of the sagas
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an index for the specified property of a saga
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.HasSagaInterfaces">
            <summary>
            True if the type implements any known saga interfaces
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.IsValidMessageType">
            <summary>
            True if the message type is a valid message type
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.MessageTypes">
            <summary>
            Returns all valid message types that are contained within the s
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.MessageTypeNames">
            <summary>
            The names of all the message types supported by the message type
            </summary>
        </member>
        <member name="T:MassTransit.Util.ObjectTypeDeserializer">
            <summary>
            Support deserialization of 'objects' from messages into actual types. Objects should have been
            serialized with JSON.NET (or some similar serializer).
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITaskParticipant.StopRequested">
            <summary>
            An awaitable task that is completed when stop is requested
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITaskParticipant.StopToken">
            <summary>
            A cancellation Token for top requests
            </summary>
        </member>
        <member name="M:MassTransit.Util.ITaskParticipant.SetComplete">
            <summary>
            Signal that the participant has completed use of the resource
            </summary>
        </member>
        <member name="M:MassTransit.Util.ITaskParticipant.SetReady">
            <summary>
            Signal that the participant is actively using the resource
            </summary>
        </member>
        <member name="M:MassTransit.Util.ITaskParticipant.SetNotReady(System.Exception)">
            <summary>
            Signal that the participant failed to become ready
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:MassTransit.Util.QueuedTaskScheduler">
            <summary>
            Provides a TaskScheduler that provides control over priorities, fairness, and the underlying threads utilized.
            </summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._taskProcessingThread">
            <summary>Whether we're processing tasks on the current thread.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._blockingTaskQueue">
            <summary>The collection of tasks to be executed on our custom threads.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._concurrencyLevel">
            <summary>
            The maximum allowed concurrency level of this scheduler.  If custom threads are
            used, this represents the number of created threads.
            </summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._disposeCancellation">
            <summary>Cancellation token used for disposal.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._nonthreadsafeTaskQueue">
            <summary>The queue of tasks to process when using an underlying target scheduler.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._queueGroups">
            <summary>
            A sorted list of round-robin queue lists.  Tasks with the smallest priority value
            are preferred.  Priority groups are round-robin'd through in order of priority.
            </summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._targetScheduler">
            <summary>The scheduler onto which actual work is scheduled.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._threads">
            <summary>The threads used by the scheduler to process work.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler._delegatesQueuedOrRunning">
            <summary>The number of Tasks that have been queued or that are running whiel using an underlying scheduler.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.#ctor">
            <summary>Initializes the scheduler.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="targetScheduler">The target underlying scheduler onto which this sceduler's work is queued.</param>
            <param name="maxConcurrencyLevel">The maximum degree of concurrency allowed for this scheduler's work.</param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.#ctor(System.Int32,System.String,System.Boolean,System.Threading.ThreadPriority,System.Threading.ApartmentState,System.Int32,System.Action,System.Action)">
            <summary>Initializes the scheduler.</summary>
            <param name="threadCount">The number of threads to create and use for processing work items.</param>
            <param name="threadName">The name to use for each of the created threads.</param>
            <param name="useForegroundThreads">A Boolean value that indicates whether to use foreground threads instead of background.</param>
            <param name="threadPriority">The priority to assign to each thread.</param>
            <param name="threadApartmentState">The apartment state to use for each thread.</param>
            <param name="threadMaxStackSize">The stack size to use for each thread.</param>
            <param name="threadInit">An initialization routine to run on each thread.</param>
            <param name="threadFinally">A finalization routine to run on each thread.</param>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.DebugQueueCount">
            <summary>Gets the number of queues currently activated.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.DebugTaskCount">
            <summary>Gets the number of tasks currently scheduled.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.Dispose">
            <summary>Initiates shutdown of the scheduler.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.ThreadBasedDispatchLoop(System.Action,System.Action)">
            <summary>The dispatch loop run by all threads in this scheduler.</summary>
            <param name="threadInit">An initialization routine to run when the thread begins.</param>
            <param name="threadFinally">A finalization routine to run before the thread ends.</param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.FindNextTaskNeedsLock(System.Threading.Tasks.Task@,MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue@)">
            <summary>Find the next task that should be executed, based on priorities and fairness and the like.</summary>
            <param name="targetTask">The found task, or null if none was found.</param>
            <param name="queueForTargetTask">
            The scheduler associated with the found task.  Due to security checks inside of TPL,  
            this scheduler needs to be used to execute that task.
            </param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.ProcessPrioritizedAndBatchedTasks">
            <summary>
            Process tasks one at a time in the best order.  
            This should be run in a Task generated by QueueTask.
            It's been separated out into its own method to show up better in Parallel Tasks.
            </summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.NotifyNewWorkItem">
            <summary>Notifies the pool that there's a new item to be executed in one of the round-robin queues.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
            <remarks>This does not include the tasks on sub-schedulers.  Those will be retrieved by the debugger separately.</remarks>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.ActivateNewQueue">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <returns>The newly created and activated queue at priority 0.</returns>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.ActivateNewQueue(System.Int32)">
            <summary>Creates and activates a new scheduling queue for this scheduler.</summary>
            <param name="priority">The priority level for the new queue.</param>
            <returns>The newly created and activated queue at the specified priority.</returns>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.RemoveQueueNeedsLock(MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Removes a scheduler from the group.</summary>
            <param name="queue">The scheduler to be removed.</param>
        </member>
        <member name="T:MassTransit.Util.QueuedTaskScheduler.QueueGroup">
            <summary>A group of queues a the same priority level.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueueGroup.NextQueueIndex">
            <summary>The starting index for the next round-robin traversal.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueueGroup.CreateSearchOrder">
            <summary>Creates a search order through this group.</summary>
            <returns>An enumerable of indices for this group.</returns>
        </member>
        <member name="T:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerDebugView">
            <summary>Debug view for the QueuedTaskScheduler.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerDebugView._scheduler">
            <summary>The scheduler.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.#ctor(MassTransit.Util.QueuedTaskScheduler)">
            <summary>Initializes the debug view.</summary>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.ScheduledTasks">
            <summary>Gets all of the Tasks queued to the scheduler directly.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerDebugView.Queues">
            <summary>Gets the prioritized and fair queues.</summary>
        </member>
        <member name="T:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue">
            <summary>Provides a scheduling queue associatd with a QueuedTaskScheduler.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue._pool">
            <summary>The scheduler with which this pool is associated.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue._priority">
            <summary>Gets the priority for this queue.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue._workItems">
            <summary>The work items stored in this queue.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue._disposed">
            <summary>Whether this queue has been disposed.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.#ctor(System.Int32,MassTransit.Util.QueuedTaskScheduler)">
            <summary>Initializes the queue.</summary>
            <param name="priority">The priority associated with this queue.</param>
            <param name="pool">The scheduler with which this queue is associated.</param>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.WaitingTasks">
            <summary>Gets the number of tasks waiting in this scheduler.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level to use when processing tasks.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.Dispose">
            <summary>Signals that the queue should be removed from the scheduler as soon as the queue is empty.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.GetScheduledTasks">
            <summary>Gets the tasks scheduled to this scheduler.</summary>
            <returns>An enumerable of all tasks queued to this scheduler.</returns>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be queued.</param>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task synchronously on the current thread.</summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was executed; otherwise, false.</returns>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.ExecuteTask(System.Threading.Tasks.Task)">
            <summary>Runs the specified ask.</summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="T:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView">
            <summary>A debug view for the queue.</summary>
        </member>
        <member name="F:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView._queue">
            <summary>The queue.</summary>
        </member>
        <member name="M:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.#ctor(MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue)">
            <summary>Initializes the debug view.</summary>
            <param name="queue">The queue to be debugged.</param>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Priority">
            <summary>Gets the priority of this queue in its associated scheduler.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.Id">
            <summary>Gets the ID of this scheduler.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.ScheduledTasks">
            <summary>Gets all of the tasks scheduled to this queue.</summary>
        </member>
        <member name="P:MassTransit.Util.QueuedTaskScheduler.QueuedTaskSchedulerQueue.QueuedTaskSchedulerQueueDebugView.AssociatedScheduler">
            <summary>Gets the QueuedTaskScheduler with which this queue is associated.</summary>
        </member>
        <member name="P:MassTransit.Util.StopSignal.StopRequested">
            <summary>
            Completed when the token has been cancelled signaling the intent to stop
            </summary>
        </member>
        <member name="P:MassTransit.Util.StopSignal.CancellationToken">
            <summary>
            The token that is cancelled once the stop is requested
            </summary>
        </member>
        <member name="P:MassTransit.Util.IAsyncControlParticipant.Completed">
            <summary>
            Completed when the participant has acknowledged the signal
            </summary>
        </member>
        <member name="M:MassTransit.Util.TypeMetadataCache`1.CheckIfValidMessageType">
            <summary>
            Returns true if the specified type is an allowed message type, i.e.
            that it doesn't come from the .Net core assemblies or is without a namespace,
            amongst others.
            </summary>
            <returns>True if the message can be sent, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Util.TypeMetadataCache`1.GetMessageTypes">
            <summary>
            Returns all the message types that are available for the specified type. This will
            return any base classes or interfaces implemented by the type that are allowed
            message types.
            </summary>
            <returns>An enumeration of valid message types implemented by the specified type</returns>
        </member>
        <member name="T:MassTransit.ServiceBusExtensions">
            <summary>
            Extension methods pertinent to service bus logic, but on
            type <see cref="T:System.Type"/> - handles different sorts of reflection
            logic.
            </summary>
        </member>
        <member name="M:MassTransit.ServiceBusExtensions.ToMessageName(System.Type)">
            <summary>
            Transforms the type of message to a normalized string which can be used
            for naming a queue on a transport.
            </summary>
            <param name="messageType">The message class/interface type</param>
            <returns>The normalized name for this type</returns>
        </member>
    </members>
</doc>
